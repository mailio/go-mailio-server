definitions:
  api.ApiError:
    properties:
      code:
        description: Code is the HTTP status code
        type: integer
      message:
        description: Message is the error message
        type: string
    type: object
  did.AuthorizedApplication:
    properties:
      approvalDate:
        type: string
      domains:
        description: 'domains of the auth application: [example.com]'
        items:
          type: string
        type: array
      id:
        description: 'target application did: did:example:123456789abcdefghi'
        type: string
      userPermissions:
        description: optional list of permissions specific to a target application
        items:
          type: string
        type: array
    type: object
  did.CredentialStatus:
    properties:
      id:
        description: https://example.edu/status/24"
        type: string
      type:
        description: CredentialStatusList2017
        type: string
    type: object
  did.CredentialSubject:
    properties:
      authorizedApplication:
        $ref: '#/definitions/did.AuthorizedApplication'
      id:
        type: string
      origin:
        type: string
    type: object
  did.DID:
    type: object
  did.Document:
    properties:
      '@context':
        items:
          type: string
        type: array
      alsoKnownAs:
        items:
          type: string
        type: array
      authentication:
        items: {}
        type: array
      id:
        $ref: '#/definitions/did.DID'
      keyAgreement:
        items:
          $ref: '#/definitions/did.KeyAgreement'
        type: array
      service:
        items:
          $ref: '#/definitions/did.Service'
        type: array
      verificationMethod:
        items:
          $ref: '#/definitions/did.VerificationMethod'
        type: array
    type: object
  did.KeyAgreement:
    properties:
      controller:
        type: string
      id:
        type: string
      publicKeyJwk:
        $ref: '#/definitions/did.PublicKeyJwk'
      publicKeyMultibase:
        type: string
      type:
        description: usually X25519KeyAgreementKey2019
        type: string
    type: object
  did.Proof:
    properties:
      challenge:
        description: prevent replay attacks
        type: string
      created:
        type: string
      domain:
        description: prevent replay attacks
        type: string
      jws:
        type: string
      proofPurpose:
        type: string
      type:
        type: string
      verificationMethod:
        type: string
    type: object
  did.PublicKeyJwk:
    properties:
      key: {}
    type: object
  did.Service:
    properties:
      accept:
        items:
          type: string
        type: array
      id:
        type: string
      routingKeys:
        items:
          type: string
        type: array
      serviceEndpoint:
        type: string
      type:
        type: string
    type: object
  did.VerifiableCredential:
    properties:
      '@context':
        items:
          type: string
        type: array
      credentialStatus:
        $ref: '#/definitions/did.CredentialStatus'
      credentialSubject:
        $ref: '#/definitions/did.CredentialSubject'
      id:
        type: string
      issuanceDate:
        type: string
      issuer:
        type: string
      proof:
        $ref: '#/definitions/did.Proof'
      type:
        items:
          type: string
        type: array
    type: object
  did.VerificationMethod:
    properties:
      controller:
        type: string
      id:
        type: string
      publicKeyJwk:
        $ref: '#/definitions/did.PublicKeyJwk'
      type:
        type: string
    type: object
  models.Handshake:
    properties:
      cborPayloadBase64:
        type: string
      content:
        $ref: '#/definitions/models.HandshakeContent'
      signatureBase64:
        type: string
    type: object
  models.HandshakeContent:
    properties:
      handshakeId:
        description: handshake ID
        type: string
      level:
        description: handshake level
        type: integer
      originServer:
        allOf:
        - $ref: '#/definitions/models.HandshakeOriginServer'
        description: origin server
      ownerAddress:
        description: mailio address of the owner of the handshake
        type: string
      ownerPublicKey:
        description: owner public key of the owner of the handshake
        type: string
      senderSha512Address:
        description: senders scrypted email address or mailio address
        type: string
      signatureBase64:
        description: owners signature of the handshake
        type: string
      signatureScheme:
        description: handshake signature scheme
        type: integer
      signupRules:
        allOf:
        - $ref: '#/definitions/models.HandshakeSignupRules'
        description: handshake signup rules
      signupSubType:
        description: handshake signup sub type
        type: integer
      status:
        description: handshake status
        type: integer
      timestamp:
        description: timestamp of the handshake
        type: integer
      type:
        description: handshake type
        type: integer
    type: object
  models.HandshakeOriginServer:
    properties:
      domain:
        description: required
        type: string
      ip:
        description: optional
        type: string
    required:
    - domain
    type: object
  models.HandshakeSignupRules:
    properties:
      frequencyMinutes:
        description: optional
        type: integer
    type: object
  types.HandshakeHeader:
    properties:
      emailLookupHashScheme:
        type: string
      signatureScheme:
        enum:
        - EdDSA_X25519
        type: string
      timestamp:
        type: integer
    required:
    - signatureScheme
    - timestamp
    type: object
  types.HandshakeLookup:
    properties:
      address:
        type: string
      emailHash:
        type: string
      id:
        type: string
    type: object
  types.HandshakeRequest:
    properties:
      handshakeHeader:
        $ref: '#/definitions/types.HandshakeHeader'
      handshakeLookups:
        items:
          $ref: '#/definitions/types.HandshakeLookup'
        type: array
      returnDefaultServerHandshake:
        description: default false
        type: boolean
      senderAddress:
        description: intended senders Mailio address
        type: string
    required:
    - handshakeHeader
    - handshakeLookups
    - senderAddress
    type: object
  types.HandshakeResponse:
    properties:
      handshakeHeader:
        $ref: '#/definitions/types.HandshakeHeader'
      handshakes:
        items:
          $ref: '#/definitions/models.HandshakeContent'
        type: array
    required:
    - handshakeHeader
    - handshakes
    type: object
  types.HandshakeSignedRequest:
    properties:
      cborPayloadBase64:
        type: string
      handshakeRequest:
        $ref: '#/definitions/types.HandshakeRequest'
      senderDomain:
        description: origin of the request (where DNS is published with Mailio public
          key)
        type: string
      signatureBase64:
        type: string
    required:
    - cborPayloadBase64
    - handshakeRequest
    - senderDomain
    - signatureBase64
    type: object
  types.HandshakeSignedResponse:
    properties:
      cborPayloadBase64:
        type: string
      handshakeResponse:
        $ref: '#/definitions/types.HandshakeResponse'
      signatureBase64:
        type: string
    required:
    - cborPayloadBase64
    - handshakeResponse
    - signatureBase64
    type: object
  types.InputLogin:
    properties:
      ed25519SigningPublicKeyBase64:
        description: public key of the private key used to sign the nonce
        type: string
      email:
        type: string
      mailioAddress:
        type: string
      nonce:
        type: string
      signatureBase64:
        description: signature of Nonce string
        type: string
    required:
    - ed25519SigningPublicKeyBase64
    - email
    - mailioAddress
    - nonce
    - signatureBase64
    type: object
  types.InputRegister:
    properties:
      databasePassword:
        description: this is a password for couchdbs private user database
        type: string
      ed25519SigningPublicKeyBase64:
        description: public key of the private key used to sign the nonce
        type: string
      email:
        type: string
      mailioAddress:
        type: string
      nonce:
        type: string
      signatureBase64:
        description: signature of Nonce string
        type: string
      x25519PublicKeyBase64:
        description: public encryption key
        type: string
    required:
    - databasePassword
    - ed25519SigningPublicKeyBase64
    - email
    - mailioAddress
    - nonce
    - signatureBase64
    - x25519PublicKeyBase64
    type: object
  types.JwsToken:
    properties:
      token:
        type: string
    type: object
  types.NonceResponse:
    properties:
      nonce:
        type: string
    type: object
  types.OutputFindAddress:
    properties:
      address:
        type: string
    type: object
  types.PagingResults:
    properties:
      bookmark:
        type: string
      docs:
        items: {}
        type: array
    type: object
  types.VCValidationResponse:
    properties:
      requestId:
        type: string
      valid:
        type: boolean
    type: object
info:
  contact: {}
  description: Implements the Mailio server based on https://mirs.mail.io/ specifications
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Mailio Server API
  version: "1.0"
paths:
  /.well-known/did-configuration.json:
    get:
      consumes:
      - application/json
      description: Returns a DID Configuration
      produces:
      - application/json
      responses:
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
        "500":
          description: error creating server did configuration
          schema:
            $ref: '#/definitions/api.ApiError'
      summary: Mailio Server DID Configuration
      tags:
      - Decentralized Identifiers
  /.well-known/did.json:
    get:
      consumes:
      - application/json
      description: Returns a DID Document
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/did.Document'
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
        "500":
          description: error creating server did
          schema:
            $ref: '#/definitions/api.ApiError'
      summary: Mailio Server DID Document (public keys)
      tags:
      - Decentralized Identifiers
  /{address}/did.json:
    get:
      consumes:
      - application/json
      description: Returns users DID document based on mailio address
      parameters:
      - description: Mailio address
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/did.Document'
        "400":
          description: Invalid DID
          schema:
            $ref: '#/definitions/api.ApiError'
        "404":
          description: DID not found
          schema:
            $ref: '#/definitions/api.ApiError'
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
      summary: Resolve users DID document
      tags:
      - Decentralized Identifiers
  /api/v1/credentials/{id}:
    get:
      consumes:
      - application/json
      description: Returns a single verifiable credential by id
      parameters:
      - description: VC ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/did.VerifiableCredential'
        "404":
          description: VC not found
          schema:
            $ref: '#/definitions/api.ApiError'
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
        "500":
          description: error creating server did
          schema:
            $ref: '#/definitions/api.ApiError'
      security:
      - Bearer: []
      summary: Get verifiable credential by id
      tags:
      - Verifiable Credentials
  /api/v1/credentials/{requestId}/verify:
    post:
      consumes:
      - application/json
      description: Checks if signature is valid and returns a boolean object
      parameters:
      - description: Reference ID (request ID, could be anything)
        in: path
        name: requestId
        required: true
        type: string
      - description: Verifiable credential to verify
        in: body
        name: vc
        required: true
        schema:
          $ref: '#/definitions/did.VerifiableCredential'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.VCValidationResponse'
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
      security:
      - Bearer: []
      summary: Verify a verifiable credential
      tags:
      - Verifiable Credentials
  /api/v1/credentials/list/{address}:
    get:
      consumes:
      - application/json
      description: Retruns a list of VCs by mailio address
      parameters:
      - description: Mailio address
        in: path
        name: address
        required: true
        type: string
      - description: Limit of VCs to return
        in: query
        name: limit
        type: integer
      - description: Page token
        in: query
        name: pageToken
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/did.Document'
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
        "500":
          description: error creating server did
          schema:
            $ref: '#/definitions/api.ApiError'
      security:
      - Bearer: []
      summary: List all VCs for a specific mailio address
      tags:
      - Verifiable Credentials
  /api/v1/findaddress:
    get:
      consumes:
      - application/json
      description: Returns a mailio address
      parameters:
      - description: Base64 formatted Scrypt of email address
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.OutputFindAddress'
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
      summary: Find user by base64 scrypt email address
      tags:
      - User Account
  /api/v1/handshake:
    get:
      consumes:
      - application/json
      description: List all handshakes
      parameters:
      - description: max number of results
        in: query
        name: limit
        type: integer
      - description: paging token
        in: query
        name: bookmark
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PagingResults'
      security:
      - Bearer: []
      summary: List handshakes (default 10 results)
      tags:
      - Handshake
    post:
      consumes:
      - application/json
      description: Create a new handshake
      parameters:
      - description: Handshake
        in: body
        name: handshake
        required: true
        schema:
          $ref: '#/definitions/models.Handshake'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Handshake'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/api.ApiError'
        "401":
          description: invalid signature
          schema:
            $ref: '#/definitions/api.ApiError'
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
      security:
      - Bearer: []
      summary: Create a new handshake
      tags:
      - Handshake
  /api/v1/handshake/{id}:
    delete:
      description: Delete a handshake
      parameters:
      - description: Handshake ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
      security:
      - Bearer: []
      summary: Delete a handshake
      tags:
      - Handshake
    get:
      consumes:
      - application/json
      description: Returns a single handshake by id
      parameters:
      - description: Handshake ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Handshake'
      security:
      - Bearer: []
      summary: Get handshake by id
      tags:
      - Handshake
    put:
      consumes:
      - application/json
      description: Update a handshake
      parameters:
      - description: Handshake ID
        in: path
        name: id
        required: true
        type: string
      - description: Handshake
        in: body
        name: handshake
        required: true
        schema:
          $ref: '#/definitions/models.Handshake'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Handshake'
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
      security:
      - Bearer: []
      summary: Update a handshake
      tags:
      - Handshake
  /api/v1/handshake/lookup/{ownerAddress}/{senderAddress}:
    get:
      consumes:
      - application/json
      description: Lookup handshake is public and looksup handshake by ownerAddress
        and sender scrypted (hashed) address or mailio address. If nothing found default
        server handshake returned
      parameters:
      - description: Owners mailio address
        in: path
        name: ownerAddress
        required: true
        type: string
      - description: Senders scrypt address or Mailio address
        in: path
        name: senderAddress
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Handshake'
      summary: Lookup handshake by ownerAddress and sender scrypted (hashed) address
        (or mailio address)
      tags:
      - Handshake
  /api/v1/login:
    post:
      consumes:
      - application/json
      description: Returns a JWS token
      parameters:
      - description: login input
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/types.InputLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.JwsToken'
        "400":
          description: Invalid or missing input parameters
          schema:
            $ref: '#/definitions/api.ApiError'
        "401":
          description: Invalid signature
          schema:
            $ref: '#/definitions/api.ApiError'
        "403":
          description: Failed to login (valid signature, no valid VC)
          schema:
            $ref: '#/definitions/api.ApiError'
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
      summary: Login with username and password
      tags:
      - User Account
  /api/v1/mtp/handshakelookup:
    post:
      consumes:
      - application/json
      description: Request handshake from server (digitally signed)
      parameters:
      - description: HandshakeSignedRequest
        in: body
        name: handshake
        required: true
        schema:
          $ref: '#/definitions/types.HandshakeSignedRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.HandshakeSignedResponse'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/api.ApiError'
        "401":
          description: invalid signature
          schema:
            $ref: '#/definitions/api.ApiError'
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
      summary: Request handshake from server (digitally signed)
      tags:
      - Mailio Transfer Protocol
  /api/v1/nonce:
    get:
      consumes:
      - application/json
      description: Returns a nonce which client needs to sign with their private key
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.NonceResponse'
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.ApiError'
      summary: Login and Registration challenge nonce
      tags:
      - User Account
  /api/v1/register:
    post:
      consumes:
      - application/json
      description: Returns a JWS token
      parameters:
      - description: registration input
        in: body
        name: registration
        required: true
        schema:
          $ref: '#/definitions/types.InputRegister'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.JwsToken'
        "401":
          description: Invalid signature
          schema:
            $ref: '#/definitions/api.ApiError'
        "404":
          description: Invalid input parameters
          schema:
            $ref: '#/definitions/api.ApiError'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/api.ApiError'
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.ApiError'
      summary: Register user
      tags:
      - User Account
  /api/v1/user/me:
    get:
      consumes:
      - application/json
      description: Get logged in users basic information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.OutputFindAddress'
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
      security:
      - Bearer: []
      summary: Get logged inusers basic information
      tags:
      - User Account
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"

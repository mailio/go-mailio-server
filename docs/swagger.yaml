definitions:
  api.ApiError:
    properties:
      code:
        description: Code is the HTTP status code
        type: integer
      message:
        description: Message is the error message
        type: string
    type: object
  did.AuthorizedApplication:
    properties:
      approvalDate:
        type: string
      domains:
        description: 'domains of the auth application: [example.com]'
        items:
          type: string
        type: array
      id:
        description: 'target application did: did:example:123456789abcdefghi'
        type: string
      userPermissions:
        description: optional list of permissions specific to a target application
        items:
          type: string
        type: array
    type: object
  did.CredentialStatus:
    properties:
      id:
        description: https://example.edu/status/24"
        type: string
      type:
        description: CredentialStatusList2017
        type: string
    type: object
  did.CredentialSubject:
    properties:
      authorizedApplication:
        $ref: '#/definitions/did.AuthorizedApplication'
      id:
        type: string
      origin:
        type: string
    type: object
  did.DID:
    type: object
  did.Document:
    properties:
      '@context':
        items:
          type: string
        type: array
      alsoKnownAs:
        items:
          type: string
        type: array
      authentication:
        items: {}
        type: array
      id:
        $ref: '#/definitions/did.DID'
      keyAgreement:
        items:
          $ref: '#/definitions/did.KeyAgreement'
        type: array
      service:
        items:
          $ref: '#/definitions/did.Service'
        type: array
      verificationMethod:
        items:
          $ref: '#/definitions/did.VerificationMethod'
        type: array
    type: object
  did.KeyAgreement:
    properties:
      controller:
        type: string
      id:
        type: string
      publicKeyJwk:
        $ref: '#/definitions/did.PublicKeyJwk'
      publicKeyMultibase:
        type: string
      type:
        description: usually X25519KeyAgreementKey2019
        type: string
    type: object
  did.Proof:
    properties:
      challenge:
        description: prevent replay attacks
        type: string
      created:
        type: string
      domain:
        description: prevent replay attacks
        type: string
      jws:
        type: string
      proofPurpose:
        type: string
      type:
        type: string
      verificationMethod:
        type: string
    type: object
  did.PublicKeyJwk:
    properties:
      key: {}
    type: object
  did.Service:
    properties:
      accept:
        items:
          type: string
        type: array
      id:
        type: string
      routingKeys:
        items:
          type: string
        type: array
      serviceEndpoint:
        type: string
      type:
        type: string
    type: object
  did.VerifiableCredential:
    properties:
      '@context':
        items:
          type: string
        type: array
      credentialStatus:
        $ref: '#/definitions/did.CredentialStatus'
      credentialSubject:
        $ref: '#/definitions/did.CredentialSubject'
      id:
        type: string
      issuanceDate:
        type: string
      issuer:
        type: string
      proof:
        $ref: '#/definitions/did.Proof'
      type:
        items:
          type: string
        type: array
    type: object
  did.VerificationMethod:
    properties:
      controller:
        type: string
      id:
        type: string
      publicKeyJwk:
        $ref: '#/definitions/did.PublicKeyJwk'
      type:
        type: string
    type: object
  mail.Address:
    properties:
      address:
        description: user@domain
        type: string
      name:
        description: Proper name; may be empty.
        type: string
    type: object
  mailiosmtp.Mail:
    properties:
      attachments:
        items:
          $ref: '#/definitions/mailiosmtp.SmtpAttachment'
        type: array
      bcc:
        description: The email addresses of the BCC recipients.
        items:
          $ref: '#/definitions/mail.Address'
        type: array
      bodyHTMLWithoutUnsafeTags:
        description: The HTML version of the email with removed unsafe tags
        type: string
      bodyHtml:
        description: The HTML version of the email.
        type: string
      bodyInlinePart:
        description: The raw inline content of the email.
        items:
          $ref: '#/definitions/mailiosmtp.MailBodyRaw'
        type: array
      bodyText:
        description: The text version of the email.
        type: string
      cc:
        description: The email addresses of the CC recipients.
        items:
          $ref: '#/definitions/mail.Address'
        type: array
      dkimVerdict:
        allOf:
        - $ref: '#/definitions/mailiosmtp.VerdictStatus'
        description: optional, dkim verdict
      dmarcVerdict:
        allOf:
        - $ref: '#/definitions/mailiosmtp.VerdictStatus'
        description: optional, dmarc verdict
      from:
        allOf:
        - $ref: '#/definitions/mail.Address'
        description: The email address of the original sender.
      headers:
        additionalProperties:
          items:
            type: string
          type: array
        description: The email headers. (one header can be specified multiple times
          with different values)
        type: object
      messageId:
        description: message id
        type: string
      replyTo:
        description: The email address to which bounces (undeliverable notifications)
          are to be forwarded.
        items:
          $ref: '#/definitions/mail.Address'
        type: array
      sizeAttachmentsBytes:
        description: The size of the attachments in bytes.
        type: integer
      sizeBytes:
        description: The size of the email in bytes.
        type: integer
      sizeHtmlBodyBytes:
        description: The size of the HTML body in bytes.
        type: integer
      sizeInlineBytes:
        description: The size of the inline content in bytes.
        type: integer
      spamVerdict:
        allOf:
        - $ref: '#/definitions/mailiosmtp.VerdictStatus'
        description: optional, spam verdict
      spfVerdict:
        allOf:
        - $ref: '#/definitions/mailiosmtp.VerdictStatus'
        description: optinal, spf verdict
      subject:
        type: string
      timestamp:
        description: since epoch in miliseconds
        type: integer
      to:
        description: The email addresses of the recipients.
        items:
          $ref: '#/definitions/mail.Address'
        type: array
      virusVerdict:
        allOf:
        - $ref: '#/definitions/mailiosmtp.VerdictStatus'
        description: optional, virus verdict
    type: object
  mailiosmtp.MailBodyRaw:
    properties:
      content:
        description: The raw content of the email.
        items:
          type: integer
        type: array
      contentDisposition:
        description: The content disposition of the raw email.
        type: string
      contentId:
        description: The content id of the raw email.
        type: string
      contentType:
        description: The content type of the raw email.
        type: string
    type: object
  mailiosmtp.SmtpAttachment:
    properties:
      content:
        description: The content of the attachment.
        items:
          type: integer
        type: array
      contentDisposition:
        description: The content disposition of the attachment.
        type: string
      contentId:
        description: The content id of the attachment.
        type: string
      contentType:
        description: The content type of the attachment.
        type: string
      contentUrl:
        description: The content uri of the attachment.
        type: string
      filename:
        description: The name of the attachment.
        type: string
    type: object
  mailiosmtp.VerdictStatus:
    properties:
      status:
        description: 'possible values: PASS, FAIL, NOT_AVAILABLE'
        enum:
        - PASS
        - FAIL
        - NOT_AVAILABLE
        type: string
    required:
    - status
    type: object
  protocol.AttestedCredentialData:
    properties:
      aaguid:
        items:
          type: integer
        type: array
      credential_id:
        items:
          type: integer
        type: array
      public_key:
        description: The raw credential public key bytes received from the attestation
          data.
        items:
          type: integer
        type: array
    type: object
  protocol.AuthenticationExtensions:
    additionalProperties: true
    type: object
  protocol.AuthenticationExtensionsClientOutputs:
    additionalProperties: true
    type: object
  protocol.AuthenticatorAssertionResponse:
    properties:
      authenticatorData:
        items:
          type: integer
        type: array
      clientDataJSON:
        description: |-
          From the spec https://www.w3.org/TR/webauthn/#dom-authenticatorresponse-clientdatajson
          This attribute contains a JSON serialization of the client data passed to the authenticator
          by the client in its call to either create() or get().
        items:
          type: integer
        type: array
      signature:
        items:
          type: integer
        type: array
      userHandle:
        items:
          type: integer
        type: array
    type: object
  protocol.AuthenticatorAttachment:
    enum:
    - platform
    - cross-platform
    type: string
    x-enum-varnames:
    - Platform
    - CrossPlatform
  protocol.AuthenticatorData:
    properties:
      att_data:
        $ref: '#/definitions/protocol.AttestedCredentialData'
      ext_data:
        items:
          type: integer
        type: array
      flags:
        $ref: '#/definitions/protocol.AuthenticatorFlags'
      rpid:
        items:
          type: integer
        type: array
      sign_count:
        type: integer
    type: object
  protocol.AuthenticatorFlags:
    enum:
    - 1
    - 2
    - 4
    - 8
    - 16
    - 32
    - 64
    - 128
    type: integer
    x-enum-comments:
      FlagBackupEligible: Referred to as BE
      FlagUserPresent: Referred to as UP
    x-enum-varnames:
    - FlagUserPresent
    - FlagRFU1
    - FlagUserVerified
    - FlagBackupEligible
    - FlagBackupState
    - FlagRFU2
    - FlagAttestedCredentialData
    - FlagHasExtensions
  protocol.AuthenticatorSelection:
    properties:
      authenticatorAttachment:
        allOf:
        - $ref: '#/definitions/protocol.AuthenticatorAttachment'
        description: |-
          AuthenticatorAttachment If this member is present, eligible authenticators are filtered to only
          authenticators attached with the specified AuthenticatorAttachment enum.
      requireResidentKey:
        description: |-
          RequireResidentKey this member describes the Relying Party's requirements regarding resident
          credentials. If the parameter is set to true, the authenticator MUST create a client-side-resident
          public key credential source when creating a public key credential.
        type: boolean
      residentKey:
        allOf:
        - $ref: '#/definitions/protocol.ResidentKeyRequirement'
        description: |-
          ResidentKey this member describes the Relying Party's requirements regarding resident
          credentials per Webauthn Level 2.
      userVerification:
        allOf:
        - $ref: '#/definitions/protocol.UserVerificationRequirement'
        description: |-
          UserVerification This member describes the Relying Party's requirements regarding user verification for
          the create() operation. Eligible authenticators are filtered to only those capable of satisfying this
          requirement.
    type: object
  protocol.AuthenticatorTransport:
    enum:
    - usb
    - nfc
    - ble
    - hybrid
    - internal
    type: string
    x-enum-varnames:
    - USB
    - NFC
    - BLE
    - Hybrid
    - Internal
  protocol.CeremonyType:
    enum:
    - webauthn.create
    - webauthn.get
    type: string
    x-enum-varnames:
    - CreateCeremony
    - AssertCeremony
  protocol.CollectedClientData:
    properties:
      challenge:
        type: string
      new_keys_may_be_added_here:
        description: Chromium (Chrome) returns a hint sometimes about how to handle
          clientDataJSON in a safe manner.
        type: string
      origin:
        type: string
      tokenBinding:
        $ref: '#/definitions/protocol.TokenBinding'
      type:
        allOf:
        - $ref: '#/definitions/protocol.CeremonyType'
        description: |-
          Type the string "webauthn.create" when creating new credentials,
          and "webauthn.get" when getting an assertion from an existing credential. The
          purpose of this member is to prevent certain types of signature confusion attacks
          (where an attacker substitutes one legitimate signature for another).
    type: object
  protocol.ConveyancePreference:
    enum:
    - none
    - indirect
    - direct
    - enterprise
    type: string
    x-enum-varnames:
    - PreferNoAttestation
    - PreferIndirectAttestation
    - PreferDirectAttestation
    - PreferEnterpriseAttestation
  protocol.CredentialAssertionResponse:
    properties:
      authenticatorAttachment:
        type: string
      clientExtensionResults:
        $ref: '#/definitions/protocol.AuthenticationExtensionsClientOutputs'
      id:
        description: |-
          ID is The credential’s identifier. The requirements for the
          identifier are distinct for each type of credential. It might
          represent a username for username/password tuples, for example.
        type: string
      rawId:
        items:
          type: integer
        type: array
      response:
        $ref: '#/definitions/protocol.AuthenticatorAssertionResponse'
      type:
        description: |-
          Type is the value of the object’s interface object's [[type]] slot,
          which specifies the credential type represented by this object.
          This should be type "public-key" for Webauthn credentials.
        type: string
    type: object
  protocol.CredentialDescriptor:
    properties:
      id:
        description: CredentialID The ID of a credential to allow/disallow.
        items:
          type: integer
        type: array
      transports:
        description: The authenticator transports that can be used.
        items:
          $ref: '#/definitions/protocol.AuthenticatorTransport'
        type: array
      type:
        allOf:
        - $ref: '#/definitions/protocol.CredentialType'
        description: The valid credential types.
    type: object
  protocol.CredentialParameter:
    properties:
      alg:
        $ref: '#/definitions/webauthncose.COSEAlgorithmIdentifier'
      type:
        $ref: '#/definitions/protocol.CredentialType'
    type: object
  protocol.CredentialType:
    enum:
    - public-key
    type: string
    x-enum-varnames:
    - PublicKeyCredentialType
  protocol.ParsedAssertionResponse:
    properties:
      authenticatorData:
        $ref: '#/definitions/protocol.AuthenticatorData'
      collectedClientData:
        $ref: '#/definitions/protocol.CollectedClientData'
      signature:
        items:
          type: integer
        type: array
      userHandle:
        items:
          type: integer
        type: array
    type: object
  protocol.ParsedCredentialAssertionData:
    properties:
      authenticatorAttachment:
        $ref: '#/definitions/protocol.AuthenticatorAttachment'
      clientExtensionResults:
        $ref: '#/definitions/protocol.AuthenticationExtensionsClientOutputs'
      id:
        type: string
      raw:
        $ref: '#/definitions/protocol.CredentialAssertionResponse'
      rawId:
        items:
          type: integer
        type: array
      response:
        $ref: '#/definitions/protocol.ParsedAssertionResponse'
      type:
        type: string
    type: object
  protocol.PublicKeyCredentialCreationOptions:
    properties:
      attestation:
        $ref: '#/definitions/protocol.ConveyancePreference'
      authenticatorSelection:
        $ref: '#/definitions/protocol.AuthenticatorSelection'
      challenge:
        items:
          type: integer
        type: array
      excludeCredentials:
        items:
          $ref: '#/definitions/protocol.CredentialDescriptor'
        type: array
      extensions:
        $ref: '#/definitions/protocol.AuthenticationExtensions'
      pubKeyCredParams:
        items:
          $ref: '#/definitions/protocol.CredentialParameter'
        type: array
      rp:
        $ref: '#/definitions/protocol.RelyingPartyEntity'
      timeout:
        type: integer
      user:
        $ref: '#/definitions/protocol.UserEntity'
    type: object
  protocol.PublicKeyCredentialRequestOptions:
    properties:
      allowCredentials:
        items:
          $ref: '#/definitions/protocol.CredentialDescriptor'
        type: array
      challenge:
        items:
          type: integer
        type: array
      extensions:
        $ref: '#/definitions/protocol.AuthenticationExtensions'
      rpId:
        type: string
      timeout:
        type: integer
      userVerification:
        $ref: '#/definitions/protocol.UserVerificationRequirement'
    type: object
  protocol.RelyingPartyEntity:
    properties:
      icon:
        description: |-
          A serialized URL which resolves to an image associated with the entity. For example,
          this could be a user’s avatar or a Relying Party's logo. This URL MUST be an a priori
          authenticated URL. Authenticators MUST accept and store a 128-byte minimum length for
          an icon member’s value. Authenticators MAY ignore an icon member’s value if its length
          is greater than 128 bytes. The URL’s scheme MAY be "data" to avoid fetches of the URL,
          at the cost of needing more storage.

          Deprecated: this has been removed from the specification recommendations.
        type: string
      id:
        description: A unique identifier for the Relying Party entity, which sets
          the RP ID.
        type: string
      name:
        description: |-
          A human-palatable name for the entity. Its function depends on what the PublicKeyCredentialEntity represents:

          When inherited by PublicKeyCredentialRpEntity it is a human-palatable identifier for the Relying Party,
          intended only for display. For example, "ACME Corporation", "Wonderful Widgets, Inc." or "ОАО Примертех".

          When inherited by PublicKeyCredentialUserEntity, it is a human-palatable identifier for a user account. It is
          intended only for display, i.e., aiding the user in determining the difference between user accounts with similar
          displayNames. For example, "alexm", "alex.p.mueller@example.com" or "+14255551234".
        type: string
    type: object
  protocol.ResidentKeyRequirement:
    enum:
    - discouraged
    - preferred
    - required
    type: string
    x-enum-varnames:
    - ResidentKeyRequirementDiscouraged
    - ResidentKeyRequirementPreferred
    - ResidentKeyRequirementRequired
  protocol.TokenBinding:
    properties:
      id:
        type: string
      status:
        $ref: '#/definitions/protocol.TokenBindingStatus'
    type: object
  protocol.TokenBindingStatus:
    enum:
    - present
    - supported
    - not-supported
    type: string
    x-enum-varnames:
    - Present
    - Supported
    - NotSupported
  protocol.UserEntity:
    properties:
      displayName:
        description: |-
          A human-palatable name for the user account, intended only for display.
          For example, "Alex P. Müller" or "田中 倫". The Relying Party SHOULD let
          the user choose this, and SHOULD NOT restrict the choice more than necessary.
        type: string
      icon:
        description: |-
          A serialized URL which resolves to an image associated with the entity. For example,
          this could be a user’s avatar or a Relying Party's logo. This URL MUST be an a priori
          authenticated URL. Authenticators MUST accept and store a 128-byte minimum length for
          an icon member’s value. Authenticators MAY ignore an icon member’s value if its length
          is greater than 128 bytes. The URL’s scheme MAY be "data" to avoid fetches of the URL,
          at the cost of needing more storage.

          Deprecated: this has been removed from the specification recommendations.
        type: string
      id:
        description: |-
          ID is the user handle of the user account entity. To ensure secure operation,
          authentication and authorization decisions MUST be made on the basis of this id
          member, not the displayName nor name members. See Section 6.1 of
          [RFC8266](https://www.w3.org/TR/webauthn/#biblio-rfc8266).
      name:
        description: |-
          A human-palatable name for the entity. Its function depends on what the PublicKeyCredentialEntity represents:

          When inherited by PublicKeyCredentialRpEntity it is a human-palatable identifier for the Relying Party,
          intended only for display. For example, "ACME Corporation", "Wonderful Widgets, Inc." or "ОАО Примертех".

          When inherited by PublicKeyCredentialUserEntity, it is a human-palatable identifier for a user account. It is
          intended only for display, i.e., aiding the user in determining the difference between user accounts with similar
          displayNames. For example, "alexm", "alex.p.mueller@example.com" or "+14255551234".
        type: string
    type: object
  protocol.UserVerificationRequirement:
    enum:
    - required
    - preferred
    - discouraged
    type: string
    x-enum-comments:
      VerificationPreferred: This is the default
    x-enum-varnames:
    - VerificationRequired
    - VerificationPreferred
    - VerificationDiscouraged
  types.DIDCommApiResponse:
    properties:
      id:
        type: string
      mtpStatusCodes:
        items:
          $ref: '#/definitions/types.MTPStatusCode'
        type: array
      type:
        type: string
    type: object
  types.DIDCommMessage:
    properties:
      attachments:
        description: attachments to the message                                                //
          MTP status message
        items:
          $ref: '#/definitions/types.EncryptedAttachment'
        type: array
      body:
        allOf:
        - $ref: '#/definitions/types.EncryptedBody'
        description: the body attribute contains all the data and structure defined
          uniquely for the schema associated with the type attribute. It MUST be a
          JSON object conforming to RFC 7159                              // the encrypted
          message body
      createdTime:
        description: time of message creation in UTC milliseconds since epoch
        type: integer
      expiresTime:
        description: sender will abort the protocol if it doesn't get a response by
          this time (UTC milliseconds since epoch)
        type: integer
      from:
        description: sender DID required because all mailio messages are encrypted
        type: string
      fromPrior:
        description: A DID is rotated by sending a message of any type to the recipient
          to be notified of the rotation
        type: string
      id:
        description: globally unique message identifier UUID (RFC 4122) recommended
        type: string
      intent:
        description: the intent of the message (if empty, ordinary message
        enum:
        - message
        - handshake
        - delivery
        type: string
      next:
        description: in case forward message
        type: string
      plainBodyBase64:
        description: the plain text message body, base64 encoded (optional)
        type: string
      pthid:
        description: parent thread identifier. Uniquely identifies the parent thread
          that the message belongs to. If not included, the message is the first message
          in the thread.
        type: string
      thid:
        description: thread identifier. Uniquely identifies the thread that the message
          belongs to. If not included, the id property of the message MUST be treated
          as the value of the thid.
        type: string
      to:
        description: 'in format: did:web:mail.io:0xabc -> recipient DIDs'
        items:
          type: string
        minItems: 1
        type: array
      type:
        description: 'a valid message type URI (MUST be: application/didcomm-encrypted+json
          or application/didcomm-signed+json or application/mailio-smtp+json)'
        enum:
        - application/didcomm-encrypted+json
        - application/didcomm-signed+json
        - application/mailio-smtp+json
        type: string
    required:
    - from
    - id
    - to
    - type
    type: object
  types.DIDCommRequest:
    properties:
      didCommMessage:
        $ref: '#/definitions/types.DIDCommMessage'
      signatureScheme:
        enum:
        - EdDSA_X25519
        type: string
      timestamp:
        type: integer
    required:
    - didCommMessage
    - signatureScheme
    - timestamp
    type: object
  types.DIDCommSignedRequest:
    properties:
      cborPayloadBase64:
        description: the payload that was signed, which is base64 encoded.
        type: string
      didCommRequest:
        $ref: '#/definitions/types.DIDCommRequest'
      senderDomain:
        description: origin of the request (where DNS is published with Mailio public
          key)
        type: string
      signatureBase64:
        description: the signature of the payload, which is base64 encoded.
        type: string
    required:
    - cborPayloadBase64
    - didCommRequest
    - senderDomain
    - signatureBase64
    type: object
  types.Domain:
    properties:
      _deleted:
        type: boolean
      _id:
        type: string
      _rev:
        description: |-
          Rev is the revision number returned
          _Rev    string `json:"_rev,omitempty"`
        type: string
      mailioDIDDomain:
        description: mailio domain (if supportsMailio)
        type: string
      mailioPublicKey:
        type: string
      name:
        type: string
      ok:
        description: _ID     string `json:"_id,omitempty"`
        type: boolean
      supportsMailio:
        description: domain can be both (mailio and smtp)
        type: boolean
      supportsStandardEmail:
        description: domain can be both (mailio and smtp)
        type: boolean
      timestamp:
        type: integer
    type: object
  types.EncryptedAttachment:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/types.EncryptedAttachmentData'
        description: the encrypted message body
      description:
        description: a human-readable description of the attachment (optional)
        type: string
      id:
        description: a globally unique identifier for the attachment
        type: string
      mediaType:
        description: the media type of the attachment
        type: string
    required:
    - data
    - id
    - mediaType
    type: object
  types.EncryptedAttachmentData:
    properties:
      json:
        $ref: '#/definitions/types.EncryptedBody'
    required:
    - json
    type: object
  types.EncryptedBody:
    properties:
      ciphertext:
        description: the encrypted message
        type: string
      iv:
        description: the initialization vector (nonce)
        type: string
      protected:
        description: the protected header
        type: string
      recipients:
        description: the recipients of the message (at least one)
        items:
          $ref: '#/definitions/types.Recipient'
        minItems: 1
        type: array
      signature:
        allOf:
        - $ref: '#/definitions/types.Signature'
        description: JWS digital signature
      tag:
        description: integrity check on the encrypted message
        type: string
    required:
    - ciphertext
    - iv
    - protected
    - recipients
    - signature
    - tag
    type: object
  types.Epk:
    properties:
      crv:
        description: The curve parameter used for the key
        type: string
      kty:
        description: Key Type, indicating the type of key used, such as an elliptic
          curve key ("OKP" for Octet Key Pair).
        type: string
      x:
        description: The X coordinate for the elliptic curve point
        type: string
    required:
    - crv
    - kty
    - x
    type: object
  types.Handshake:
    properties:
      cborPayloadBase64:
        description: payload in cbor format of handshake Content
        type: string
      content:
        $ref: '#/definitions/types.HandshakeContent'
      signatureBase64:
        type: string
    type: object
  types.HandshakeContent:
    properties:
      created:
        description: timestamp of the handshake
        type: number
      handshakeId:
        description: handshake ID
        type: string
      level:
        description: handshake level
        type: string
      originServer:
        allOf:
        - $ref: '#/definitions/types.HandshakeOriginServer'
        description: origin server
      ownerAddress:
        description: mailio address of the owner of the handshake
        type: string
      ownerPublicKey:
        description: owner public key of the owner of the handshake
        type: string
      senderMetadata:
        allOf:
        - $ref: '#/definitions/types.SenderMetadata'
        description: sender meta data (either Mailio address or sha512 email address
          )
      signatureBase64:
        description: owners signature of the handshake
        type: string
      signatureScheme:
        description: handshake signature scheme
        type: string
      signupRules:
        allOf:
        - $ref: '#/definitions/types.HandshakeSignupRules'
        description: handshake signup rules
      signupSubType:
        description: handshake signup sub type
        type: integer
      status:
        description: handshake status
        type: string
      type:
        description: handshake type
        type: string
    type: object
  types.HandshakeHeader:
    properties:
      emailLookupHashScheme:
        type: string
      signatureScheme:
        enum:
        - EdDSA_X25519
        type: string
      timestamp:
        type: integer
    required:
    - signatureScheme
    - timestamp
    type: object
  types.HandshakeLink:
    properties:
      link:
        type: string
    type: object
  types.HandshakeLookup:
    properties:
      address:
        type: string
      emailHash:
        description: scrypt hash of the email address
        type: string
      id:
        type: string
      originServer:
        $ref: '#/definitions/types.HandshakeOriginServer'
    required:
    - originServer
    type: object
  types.HandshakeOriginServer:
    properties:
      domain:
        description: required
        type: string
      ip:
        description: optional
        type: string
    required:
    - domain
    type: object
  types.HandshakeRequest:
    properties:
      handshakeHeader:
        $ref: '#/definitions/types.HandshakeHeader'
      handshakeLookups:
        items:
          $ref: '#/definitions/types.HandshakeLookup'
        type: array
      returnDefaultServerHandshake:
        description: default false
        type: boolean
      senderAddress:
        description: intended senders Mailio address
        type: string
    required:
    - handshakeHeader
    - handshakeLookups
    - senderAddress
    type: object
  types.HandshakeResponse:
    properties:
      handshakeHeader:
        $ref: '#/definitions/types.HandshakeHeader'
      handshakes:
        items:
          $ref: '#/definitions/types.HandshakeContent'
        type: array
    required:
    - handshakeHeader
    - handshakes
    type: object
  types.HandshakeSignedRequest:
    properties:
      cborPayloadBase64:
        type: string
      handshakeRequest:
        $ref: '#/definitions/types.HandshakeRequest'
      senderDomain:
        description: origin of the request (where DNS is published with Mailio public
          key)
        type: string
      signatureBase64:
        type: string
    required:
    - cborPayloadBase64
    - handshakeRequest
    - senderDomain
    - signatureBase64
    type: object
  types.HandshakeSignedResponse:
    properties:
      cborPayloadBase64:
        type: string
      handshakeResponse:
        $ref: '#/definitions/types.HandshakeResponse'
      signatureBase64:
        type: string
    required:
    - cborPayloadBase64
    - handshakeResponse
    - signatureBase64
    type: object
  types.HandshakeSignupRules:
    properties:
      frequencyMinutes:
        description: optional
        type: integer
    type: object
  types.Header:
    properties:
      epk:
        allOf:
        - $ref: '#/definitions/types.Epk'
        description: '(Ephemeral Public Key): A temporary public key that was used
          in conjunction with the recipient''s public key to encrypt the encrypted_key'
      kid:
        description: '(Key ID): A hint indicating which key was used to encrypt the'
        type: string
    required:
    - epk
    - kid
    type: object
  types.InputHandshakeLookup:
    properties:
      lookups:
        items:
          $ref: '#/definitions/types.HandshakeLookup'
        minItems: 1
        type: array
    type: object
  types.InputLogin:
    properties:
      ed25519SigningPublicKeyBase64:
        description: public key of the private key used to sign the nonce
        type: string
      email:
        type: string
      mailioAddress:
        type: string
      nonce:
        type: string
      signatureBase64:
        description: signature of Nonce string
        type: string
    required:
    - ed25519SigningPublicKeyBase64
    - email
    - mailioAddress
    - nonce
    - signatureBase64
    type: object
  types.InputRegister:
    properties:
      databasePassword:
        description: this is a password for couchdbs private user database
        type: string
      ed25519SigningPublicKeyBase64:
        description: public key of the private key used to sign the nonce
        type: string
      email:
        type: string
      mailioAddress:
        type: string
      nonce:
        type: string
      signatureBase64:
        description: signature of Nonce string
        type: string
      x25519PublicKeyBase64:
        description: public encryption key
        type: string
    required:
    - databasePassword
    - ed25519SigningPublicKeyBase64
    - email
    - mailioAddress
    - nonce
    - signatureBase64
    - x25519PublicKeyBase64
    type: object
  types.JwsToken:
    properties:
      token:
        type: string
    type: object
  types.MTPStatusCode:
    properties:
      address:
        description: Address of the recipient or sender
        type: string
      class:
        description: Represents the class of the status code (2, 4, 5)
        enum:
        - 2
        - 4
        - 5
        type: integer
      description:
        description: Human-readable message or description (optional)
        type: string
      detail:
        description: Represents the detail of the status code
        type: integer
      subject:
        description: Represents the subject category of the status code
        minimum: 0
        type: integer
      timestamp:
        description: Unix timestamp in milliseconds
        type: integer
    required:
    - class
    - detail
    - subject
    type: object
  types.NonceResponse:
    properties:
      nonce:
        type: string
    type: object
  types.OutputBasicUserInfo:
    properties:
      address:
        type: string
      created:
        type: integer
      totalDisk:
        type: integer
      usedDisk:
        type: integer
    type: object
  types.OutputUserAddress:
    properties:
      address:
        type: string
    type: object
  types.PagingResults:
    properties:
      bookmark:
        type: string
      docs:
        items: {}
        type: array
    type: object
  types.Recipient:
    properties:
      encrypted_key:
        description: Tthe key used to encrypt the ciphertext, encrypted with the recipient's
          public key
        type: string
      header:
        allOf:
        - $ref: '#/definitions/types.Header'
        description: encryption parameters specific to each recipient
    required:
    - encrypted_key
    - header
    type: object
  types.SenderMetadata:
    properties:
      address:
        description: mailio address
        type: string
      emailHash:
        description: scrypt hash of the email address
        type: string
    type: object
  types.Signature:
    properties:
      payload:
        description: The payload that was signed, which is base64URL encoded.
        type: string
      signatures:
        items:
          $ref: '#/definitions/types.SignatureDetail'
        type: array
    type: object
  types.SignatureDetail:
    properties:
      protected:
        description: Base64URL encoded JSON string containing the header parameters
          used for the signature
        type: string
      signature:
        type: string
    type: object
  types.SmartKeyPayload:
    properties:
      address:
        description: mailio address
        type: string
      challenge:
        description: challenge
        type: string
      challengeSignature:
        description: signature of the challenge with the primary private key (held
          by client only)
        type: string
      databasePassword:
        description: CoachDB password
        type: string
      email:
        description: email address
        type: string
      passwordShare:
        description: a single share of a Shamir secret (2 out of 3 required for decryption)
        type: string
      preRotatedMailioKey:
        description: encypted pre-Shamir secret sharing
        type: string
      primaryEd25519PublicKey:
        description: primary Ed25519 public key (associated with address)
        type: string
      primaryX25519PublicKey:
        description: primary X25519 public key (associated with address)
        type: string
      smartKeyEncrypted:
        description: encrypted pre-Shamir secret sharing
        type: string
    required:
    - address
    - challenge
    - challengeSignature
    - databasePassword
    - email
    - passwordShare
    - preRotatedMailioKey
    - primaryEd25519PublicKey
    - primaryX25519PublicKey
    - smartKeyEncrypted
    type: object
  types.UserDomain:
    properties:
      name:
        type: string
      type:
        type: string
    type: object
  types.VCValidationResponse:
    properties:
      requestId:
        type: string
      valid:
        type: boolean
    type: object
  types.WebauthRegistrationVerify:
    properties:
      attestationResponse:
        $ref: '#/definitions/types.WebauthnAttestationResponseJSON'
      smartKeyPayload:
        $ref: '#/definitions/types.SmartKeyPayload'
    required:
    - attestationResponse
    - smartKeyPayload
    type: object
  types.WebauthnAttestationResponse:
    properties:
      attestationObject:
        type: string
      authenticatorData:
        type: string
      clientDataJSON:
        type: string
      publicKey:
        type: string
      publicKeyAlgorithm:
        type: integer
      transports:
        items:
          type: string
        type: array
    type: object
  types.WebauthnAttestationResponseJSON:
    properties:
      authenticatorAttachment:
        type: string
      clientExtensionResults:
        additionalProperties: true
        type: object
      id:
        type: string
      rawId:
        type: string
      response:
        $ref: '#/definitions/types.WebauthnAttestationResponse'
      type:
        type: string
    type: object
  webauthncose.COSEAlgorithmIdentifier:
    enum:
    - -7
    - -35
    - -36
    - -65535
    - -257
    - -258
    - -259
    - -37
    - -38
    - -39
    - -8
    - -47
    type: integer
    x-enum-varnames:
    - AlgES256
    - AlgES384
    - AlgES512
    - AlgRS1
    - AlgRS256
    - AlgRS384
    - AlgRS512
    - AlgPS256
    - AlgPS384
    - AlgPS512
    - AlgEdDSA
    - AlgES256K
info:
  contact: {}
  description: Implements the Mailio server based on https://mirs.mail.io/ specifications
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Mailio Server API
  version: "1.0"
paths:
  /.well-known/did-configuration.json:
    get:
      consumes:
      - application/json
      description: Returns a DID Configuration
      produces:
      - application/json
      responses:
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
        "500":
          description: error creating server did configuration
          schema:
            $ref: '#/definitions/api.ApiError'
      summary: Mailio Server DID Configuration
      tags:
      - Decentralized Identifiers
  /.well-known/did.json:
    get:
      consumes:
      - application/json
      description: Returns a DID Document
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/did.Document'
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
        "500":
          description: error creating server did
          schema:
            $ref: '#/definitions/api.ApiError'
      summary: Mailio Server DID Document (public keys)
      tags:
      - Decentralized Identifiers
  /{address}/did.json:
    get:
      consumes:
      - application/json
      description: Returns users DID document based on mailio address
      parameters:
      - description: Mailio address
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/did.Document'
        "400":
          description: Invalid DID
          schema:
            $ref: '#/definitions/api.ApiError'
        "404":
          description: DID not found
          schema:
            $ref: '#/definitions/api.ApiError'
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
      summary: Resolve users DID document
      tags:
      - Decentralized Identifiers
  /api/v1/credentials/{id}:
    get:
      consumes:
      - application/json
      description: Returns a single verifiable credential by id
      parameters:
      - description: VC ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/did.VerifiableCredential'
        "404":
          description: VC not found
          schema:
            $ref: '#/definitions/api.ApiError'
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
        "500":
          description: error creating server did
          schema:
            $ref: '#/definitions/api.ApiError'
      security:
      - Bearer: []
      summary: Get verifiable credential by id
      tags:
      - Verifiable Credentials
  /api/v1/credentials/{requestId}/verify:
    post:
      consumes:
      - application/json
      description: Checks if signature is valid and returns a boolean object
      parameters:
      - description: Reference ID (request ID, could be anything)
        in: path
        name: requestId
        required: true
        type: string
      - description: Verifiable credential to verify
        in: body
        name: vc
        required: true
        schema:
          $ref: '#/definitions/did.VerifiableCredential'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.VCValidationResponse'
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
      security:
      - Bearer: []
      summary: Verify a verifiable credential
      tags:
      - Verifiable Credentials
  /api/v1/credentials/list/{address}:
    get:
      consumes:
      - application/json
      description: Retruns a list of VCs by mailio address
      parameters:
      - description: Mailio address
        in: path
        name: address
        required: true
        type: string
      - description: Limit of VCs to return
        in: query
        name: limit
        type: integer
      - description: Page token
        in: query
        name: pageToken
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/did.Document'
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
        "500":
          description: error creating server did
          schema:
            $ref: '#/definitions/api.ApiError'
      security:
      - Bearer: []
      summary: List all VCs for a specific mailio address
      tags:
      - Verifiable Credentials
  /api/v1/didmessage:
    post:
      consumes:
      - application/json
      description: Send end-to-end encrypted message to DID recipients
      parameters:
      - description: didcomm-encrypted+json
        in: body
        name: handshake
        required: true
        schema:
          $ref: '#/definitions/types.DIDCommMessage'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/types.DIDCommApiResponse'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/api.ApiError'
        "401":
          description: invalid signature or unauthorized to send messages
          schema:
            $ref: '#/definitions/api.ApiError'
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
      security:
      - Bearer: []
      summary: Send end-to-end encrypted message to DID recipients
      tags:
      - Messaging
  /api/v1/domains:
    get:
      consumes:
      - application/json
      description: Returns a list of all supported domains
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.UserDomain'
            type: array
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
        "500":
          description: error creating server did
          schema:
            $ref: '#/definitions/api.ApiError'
      summary: List all domains
      tags:
      - Domains
  /api/v1/findaddress:
    get:
      consumes:
      - application/json
      description: Returns a mailio address
      parameters:
      - description: Base64 formatted Scrypt of email address
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.OutputUserAddress'
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
      summary: Find user by base64 scrypt email address
      tags:
      - User Account
  /api/v1/handshake:
    get:
      consumes:
      - application/json
      description: List all handshakes
      parameters:
      - description: max number of results
        in: query
        name: limit
        type: integer
      - description: paging token
        in: query
        name: bookmark
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PagingResults'
        "401":
          description: not authorized
          schema:
            $ref: '#/definitions/api.ApiError'
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
      security:
      - Bearer: []
      summary: List handshakes (default 10 results)
      tags:
      - Handshake
    post:
      consumes:
      - application/json
      description: Create a new handshake
      parameters:
      - description: Handshake
        in: body
        name: handshake
        required: true
        schema:
          $ref: '#/definitions/types.Handshake'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/types.Handshake'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/api.ApiError'
        "401":
          description: invalid signature/not authorized
          schema:
            $ref: '#/definitions/api.ApiError'
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
      security:
      - Bearer: []
      summary: Create a new handshake
      tags:
      - Handshake
  /api/v1/handshake/{id}:
    delete:
      description: Delete a handshake
      parameters:
      - description: Handshake ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "401":
          description: not authorized
          schema:
            $ref: '#/definitions/api.ApiError'
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
      security:
      - Bearer: []
      summary: Delete a handshake
      tags:
      - Handshake
    get:
      consumes:
      - application/json
      description: Returns a single handshake by id
      parameters:
      - description: Handshake ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Handshake'
      security:
      - Bearer: []
      summary: Get handshake by id
      tags:
      - Handshake
    put:
      consumes:
      - application/json
      description: Update a handshake
      parameters:
      - description: Handshake ID
        in: path
        name: id
        required: true
        type: string
      - description: Handshake
        in: body
        name: handshake
        required: true
        schema:
          $ref: '#/definitions/types.Handshake'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Handshake'
        "401":
          description: not authorized
          schema:
            $ref: '#/definitions/api.ApiError'
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
      security:
      - Bearer: []
      summary: Update a handshake
      tags:
      - Handshake
  /api/v1/handshakefetch:
    post:
      consumes:
      - application/json
      description: Request handshake from origin server (digitally signed)
      parameters:
      - description: InputHandshakeLookup
        in: body
        name: handshake
        required: true
        schema:
          $ref: '#/definitions/types.InputHandshakeLookup'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.HandshakeContent'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/api.ApiError'
        "401":
          description: invalid signature
          schema:
            $ref: '#/definitions/api.ApiError'
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
      security:
      - Bearer: []
      summary: Request handshake from origin server (digitally signed) if missing
        in local database
      tags:
      - Handshake
  /api/v1/handshakeoffer:
    get:
      description: Create personal handshake link
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.HandshakeLink'
        "401":
          description: not authorized
          schema:
            $ref: '#/definitions/api.ApiError'
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
      security:
      - Bearer: []
      summary: Create personal handshake link
      tags:
      - Handshake
  /api/v1/login:
    post:
      consumes:
      - application/json
      description: Returns a JWS token
      parameters:
      - description: login input
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/types.InputLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.JwsToken'
        "400":
          description: Invalid or missing input parameters
          schema:
            $ref: '#/definitions/api.ApiError'
        "401":
          description: Invalid signature
          schema:
            $ref: '#/definitions/api.ApiError'
        "403":
          description: Failed to login (valid signature, no valid VC)
          schema:
            $ref: '#/definitions/api.ApiError'
        "404":
          description: Failed to login (user not registered)
          schema:
            $ref: '#/definitions/api.ApiError'
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
      summary: Login with username and password
      tags:
      - User Account
  /api/v1/mtp/handshake:
    post:
      consumes:
      - application/json
      description: Request handshake from this server (must be digitally signed)
      parameters:
      - description: HandshakeSignedRequest
        in: body
        name: handshake
        required: true
        schema:
          $ref: '#/definitions/types.HandshakeSignedRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.HandshakeSignedResponse'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/api.ApiError'
        "401":
          description: invalid signature
          schema:
            $ref: '#/definitions/api.ApiError'
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
      summary: Request handshake from this server (must be digitally signed)
      tags:
      - Mailio Transfer Protocol
  /api/v1/mtp/message:
    post:
      consumes:
      - application/json
      description: Receive end-to-end encrypted message (signed by senders Mailio
        server)
      parameters:
      - description: didcomm signed request
        in: body
        name: handshake
        required: true
        schema:
          $ref: '#/definitions/types.DIDCommSignedRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.DIDCommApiResponse'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/api.ApiError'
        "401":
          description: invalid signature
          schema:
            $ref: '#/definitions/api.ApiError'
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
      summary: Receive end-to-end encrypted message (signed by senders Mailio server)
      tags:
      - Mailio Transfer Protocol
  /api/v1/nonce:
    get:
      consumes:
      - application/json
      description: Returns a nonce which client needs to sign with their private key
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.NonceResponse'
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.ApiError'
      summary: Login and Registration challenge nonce
      tags:
      - User Account
  /api/v1/nonce/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes nonce if it exists
      parameters:
      - description: nonce id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.NonceResponse'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/api.ApiError'
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.ApiError'
      summary: Deletes nonce if it exists
      tags:
      - User Account
  /api/v1/register:
    post:
      consumes:
      - application/json
      description: Returns a JWS token
      parameters:
      - description: registration input
        in: body
        name: registration
        required: true
        schema:
          $ref: '#/definitions/types.InputRegister'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.JwsToken'
        "401":
          description: Invalid signature
          schema:
            $ref: '#/definitions/api.ApiError'
        "404":
          description: Invalid input parameters
          schema:
            $ref: '#/definitions/api.ApiError'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/api.ApiError'
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.ApiError'
      summary: Register user
      tags:
      - User Account
  /api/v1/resolve/domain:
    get:
      consumes:
      - application/json
      description: Identify if an email is a DIDcomm/Mailio or SMTP address, and resolve
        the DID if it’s from a Mailio server.
      parameters:
      - description: valid email address
        in: query
        name: email
        required: true
        type: string
      - default: false
        description: force DNS update
        in: query
        name: force
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Domain'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/api.ApiError'
        "401":
          description: invalid signature or unauthorized to send messages
          schema:
            $ref: '#/definitions/api.ApiError'
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
      security:
      - Bearer: []
      summary: Resolve domain from email address (smtp or mailio)
      tags:
      - Messaging
  /api/v1/smtp:
    post:
      consumes:
      - application/json
      description: Send SMTP email
      parameters:
      - description: smtp email
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/mailiosmtp.Mail'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/mailiosmtp.Mail'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/api.ApiError'
        "401":
          description: invalid signature or unauthorized to send messages
          schema:
            $ref: '#/definitions/api.ApiError'
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
      security:
      - Bearer: []
      summary: Send SMTP email
      tags:
      - Messaging
  /api/v1/user/me:
    get:
      consumes:
      - application/json
      description: Get logged in users smartkey based on a JWS token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.OutputBasicUserInfo'
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
      security:
      - Bearer: []
      summary: Get logged in users smartkey based on a JWS token
      tags:
      - User Account
  /api/v1/webauthn/login_options:
    get:
      consumes:
      - application/json
      description: LoginOptions return WebAuthN login options
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/protocol.PublicKeyCredentialRequestOptions'
        "400":
          description: invalid input parameters
          schema:
            $ref: '#/definitions/api.ApiError'
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
      summary: LoginOptions return login options
      tags:
      - WebAuthn
  /api/v1/webauthn/login_verify:
    post:
      consumes:
      - application/json
      description: LoginOptions return WebAuthN login options
      parameters:
      - description: Credential Assertion Data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/protocol.ParsedCredentialAssertionData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/protocol.PublicKeyCredentialRequestOptions'
        "400":
          description: invalid input parameters
          schema:
            $ref: '#/definitions/api.ApiError'
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
      summary: LoginOptions return login options
      tags:
      - WebAuthn
  /api/v1/webauthn/registration_options:
    get:
      consumes:
      - application/json
      description: Registration options for a new WebAuthn device
      parameters:
      - description: Email address to register
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/protocol.PublicKeyCredentialCreationOptions'
        "400":
          description: invalid email address
          schema:
            $ref: '#/definitions/api.ApiError'
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
      summary: Registration options for a new WebAuthn device
      tags:
      - WebAuthn
  /api/v1/webauthn/registration_verify:
    post:
      consumes:
      - application/json
      description: WebAuthnVerifyRegistration check the signed digital challenge
      parameters:
      - description: Attestation object + Encrypted SmartKey payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/types.WebauthRegistrationVerify'
      produces:
      - application/json
      responses:
        "200":
          description: JWS
          schema:
            type: string
        "400":
          description: invalid input parameters
          schema:
            $ref: '#/definitions/api.ApiError'
        "429":
          description: rate limit exceeded
          schema:
            $ref: '#/definitions/api.ApiError'
      summary: WebAuthnVerifyRegistration check the validity of the registration
      tags:
      - WebAuthn
  /webhook/mailgun_mime:
    post:
      consumes:
      - application/json
      description: Receive a new SMTP email
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/api.ApiError'
        "401":
          description: invalid signature/not authorized
          schema:
            $ref: '#/definitions/api.ApiError'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/api.ApiError'
      summary: Receive a new SMTP email
      tags:
      - Smtp Webhook Handler
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"

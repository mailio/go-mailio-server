// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/.well-known/did-configuration.json": {
            "get": {
                "description": "Returns a DID Configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Decentralized Identifiers"
                ],
                "summary": "Mailio Server DID Configuration",
                "responses": {
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "500": {
                        "description": "error creating server did configuration",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/.well-known/did.json": {
            "get": {
                "description": "Returns a DID Document",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Decentralized Identifiers"
                ],
                "summary": "Mailio Server DID Document (public keys)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/did.Document"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "500": {
                        "description": "error creating server did",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/credentials/list/{address}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retruns a list of VCs by mailio address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Verifiable Credentials"
                ],
                "summary": "List all VCs for a specific mailio address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Mailio address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit of VCs to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page token",
                        "name": "pageToken",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/did.Document"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "500": {
                        "description": "error creating server did",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/credentials/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Returns a single verifiable credential by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Verifiable Credentials"
                ],
                "summary": "Get verifiable credential by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "VC ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/did.VerifiableCredential"
                        }
                    },
                    "404": {
                        "description": "VC not found",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "500": {
                        "description": "error creating server did",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/credentials/{requestId}/verify": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Checks if signature is valid and returns a boolean object",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Verifiable Credentials"
                ],
                "summary": "Verify a verifiable credential",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Reference ID (request ID, could be anything)",
                        "name": "requestId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Verifiable credential to verify",
                        "name": "vc",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/did.VerifiableCredential"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.VCValidationResponse"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/didmessage": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Send end-to-end encrypted message to DID recipients",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Messaging"
                ],
                "summary": "Send end-to-end encrypted message to DID recipients",
                "parameters": [
                    {
                        "description": "didcomm-encrypted+json",
                        "name": "handshake",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.DIDCommMessage"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/types.DIDCommApiResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "401": {
                        "description": "invalid signature",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/findaddress": {
            "get": {
                "description": "Returns a mailio address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Account"
                ],
                "summary": "Find user by base64 scrypt email address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Base64 formatted Scrypt of email address",
                        "name": "email",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.OutputFindAddress"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/handshake": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "List all handshakes",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Handshake"
                ],
                "summary": "List handshakes (default 10 results)",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "max number of results",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "paging token",
                        "name": "bookmark",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.PagingResults"
                        }
                    },
                    "401": {
                        "description": "not authorized",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new handshake",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Handshake"
                ],
                "summary": "Create a new handshake",
                "parameters": [
                    {
                        "description": "Handshake",
                        "name": "handshake",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.Handshake"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.Handshake"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "401": {
                        "description": "invalid signature/not authorized",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/handshake/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Returns a single handshake by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Handshake"
                ],
                "summary": "Get handshake by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Handshake ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Handshake"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a handshake",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Handshake"
                ],
                "summary": "Update a handshake",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Handshake ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Handshake",
                        "name": "handshake",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.Handshake"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Handshake"
                        }
                    },
                    "401": {
                        "description": "not authorized",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a handshake",
                "tags": [
                    "Handshake"
                ],
                "summary": "Delete a handshake",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Handshake ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "not authorized",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/handshakefetch": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Request handshake from origin server (digitally signed)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Handshake"
                ],
                "summary": "Request handshake from origin server (digitally signed) if missing in local database",
                "parameters": [
                    {
                        "description": "InputHandshakeLookup",
                        "name": "handshake",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.InputHandshakeLookup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.HandshakeContent"
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "401": {
                        "description": "invalid signature",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/handshakeoffer": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create personal handshake link",
                "tags": [
                    "Handshake"
                ],
                "summary": "Create personal handshake link",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.HandshakeLink"
                        }
                    },
                    "401": {
                        "description": "not authorized",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/login": {
            "post": {
                "description": "Returns a JWS token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Account"
                ],
                "summary": "Login with username and password",
                "parameters": [
                    {
                        "description": "login input",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.InputLogin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.JwsToken"
                        }
                    },
                    "400": {
                        "description": "Invalid or missing input parameters",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "401": {
                        "description": "Invalid signature",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "403": {
                        "description": "Failed to login (valid signature, no valid VC)",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/mtp/handshake": {
            "post": {
                "description": "Request handshake from this server (must be digitally signed)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mailio Transfer Protocol"
                ],
                "summary": "Request handshake from this server (must be digitally signed)",
                "parameters": [
                    {
                        "description": "HandshakeSignedRequest",
                        "name": "handshake",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.HandshakeSignedRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.HandshakeSignedResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "401": {
                        "description": "invalid signature",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/mtp/message/{address}": {
            "post": {
                "description": "Receive end-to-end encrypted message",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mailio Transfer Protocol"
                ],
                "summary": "Receive end-to-end encrypted message",
                "parameters": [
                    {
                        "description": "didcomm-encrypted+json",
                        "name": "handshake",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.DIDCommMessage"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.DIDCommMessage"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "401": {
                        "description": "invalid signature",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/nonce": {
            "get": {
                "description": "Returns a nonce which client needs to sign with their private key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Account"
                ],
                "summary": "Login and Registration challenge nonce",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.NonceResponse"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/register": {
            "post": {
                "description": "Returns a JWS token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Account"
                ],
                "summary": "Register user",
                "parameters": [
                    {
                        "description": "registration input",
                        "name": "registration",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.InputRegister"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.JwsToken"
                        }
                    },
                    "401": {
                        "description": "Invalid signature",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "404": {
                        "description": "Invalid input parameters",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "409": {
                        "description": "User already exists",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/user/me": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get logged in users basic information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Account"
                ],
                "summary": "Get logged inusers basic information",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.OutputFindAddress"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/{address}/did.json": {
            "get": {
                "description": "Returns users DID document based on mailio address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Decentralized Identifiers"
                ],
                "summary": "Resolve users DID document",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Mailio address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/did.Document"
                        }
                    },
                    "400": {
                        "description": "Invalid DID",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "404": {
                        "description": "DID not found",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.ApiError": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Code is the HTTP status code",
                    "type": "integer"
                },
                "message": {
                    "description": "Message is the error message",
                    "type": "string"
                }
            }
        },
        "did.AuthorizedApplication": {
            "type": "object",
            "properties": {
                "approvalDate": {
                    "type": "string"
                },
                "domains": {
                    "description": "domains of the auth application: [example.com]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "description": "target application did: did:example:123456789abcdefghi",
                    "type": "string"
                },
                "userPermissions": {
                    "description": "optional list of permissions specific to a target application",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "did.CredentialStatus": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "https://example.edu/status/24\"",
                    "type": "string"
                },
                "type": {
                    "description": "CredentialStatusList2017",
                    "type": "string"
                }
            }
        },
        "did.CredentialSubject": {
            "type": "object",
            "properties": {
                "authorizedApplication": {
                    "$ref": "#/definitions/did.AuthorizedApplication"
                },
                "id": {
                    "type": "string"
                },
                "origin": {
                    "type": "string"
                }
            }
        },
        "did.DID": {
            "type": "object"
        },
        "did.Document": {
            "type": "object",
            "properties": {
                "@context": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "alsoKnownAs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "authentication": {
                    "type": "array",
                    "items": {}
                },
                "id": {
                    "$ref": "#/definitions/did.DID"
                },
                "keyAgreement": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/did.KeyAgreement"
                    }
                },
                "service": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/did.Service"
                    }
                },
                "verificationMethod": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/did.VerificationMethod"
                    }
                }
            }
        },
        "did.KeyAgreement": {
            "type": "object",
            "properties": {
                "controller": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "publicKeyJwk": {
                    "$ref": "#/definitions/did.PublicKeyJwk"
                },
                "publicKeyMultibase": {
                    "type": "string"
                },
                "type": {
                    "description": "usually X25519KeyAgreementKey2019",
                    "type": "string"
                }
            }
        },
        "did.Proof": {
            "type": "object",
            "properties": {
                "challenge": {
                    "description": "prevent replay attacks",
                    "type": "string"
                },
                "created": {
                    "type": "string"
                },
                "domain": {
                    "description": "prevent replay attacks",
                    "type": "string"
                },
                "jws": {
                    "type": "string"
                },
                "proofPurpose": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "verificationMethod": {
                    "type": "string"
                }
            }
        },
        "did.PublicKeyJwk": {
            "type": "object",
            "properties": {
                "key": {}
            }
        },
        "did.Service": {
            "type": "object",
            "properties": {
                "accept": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "routingKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "serviceEndpoint": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "did.VerifiableCredential": {
            "type": "object",
            "properties": {
                "@context": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "credentialStatus": {
                    "$ref": "#/definitions/did.CredentialStatus"
                },
                "credentialSubject": {
                    "$ref": "#/definitions/did.CredentialSubject"
                },
                "id": {
                    "type": "string"
                },
                "issuanceDate": {
                    "type": "string"
                },
                "issuer": {
                    "type": "string"
                },
                "proof": {
                    "$ref": "#/definitions/did.Proof"
                },
                "type": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "did.VerificationMethod": {
            "type": "object",
            "properties": {
                "controller": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "publicKeyJwk": {
                    "$ref": "#/definitions/did.PublicKeyJwk"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "types.DIDCommApiResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "types.DIDCommMessage": {
            "type": "object",
            "required": [
                "body",
                "from",
                "id",
                "to",
                "type"
            ],
            "properties": {
                "attachments": {
                    "description": "attachments to the message                                                // MTP status message",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.EncryptedAttachment"
                    }
                },
                "body": {
                    "description": "the body attribute contains all the data and structure defined uniquely for the schema associated with the type attribute. It MUST be a JSON object conforming to RFC 7159                              // the encrypted message body",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.EncryptedBody"
                        }
                    ]
                },
                "createdTime": {
                    "description": "time of message creation in UTC milliseconds since epoch",
                    "type": "integer"
                },
                "expiresTime": {
                    "description": "sender will abort the protocol if it doesn't get a response by this time (UTC milliseconds since epoch)",
                    "type": "integer"
                },
                "from": {
                    "description": "sender DID required because all mailio messages are encrypted",
                    "type": "string"
                },
                "fromPrior": {
                    "description": "A DID is rotated by sending a message of any type to the recipient to be notified of the rotation",
                    "type": "string"
                },
                "id": {
                    "description": "globally unique message identifier UUID (RFC 4122) recommended",
                    "type": "string"
                },
                "intent": {
                    "description": "the intent of the message (if empty, ordinary message",
                    "type": "string",
                    "enum": [
                        "message",
                        "handshake",
                        "error"
                    ]
                },
                "next": {
                    "description": "in case forward message",
                    "type": "string"
                },
                "pthid": {
                    "description": "parent thread identifier. Uniquely identifies the parent thread that the message belongs to. If not included, the message is the first message in the thread.",
                    "type": "string"
                },
                "thid": {
                    "description": "thread identifier. Uniquely identifies the thread that the message belongs to. If not included, the id property of the message MUST be treated as the value of the thid.",
                    "type": "string"
                },
                "to": {
                    "description": "in format: did:web:mail.io:0xabc -\u003e recipient DIDs",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "description": "a valid message type URI (MUST be: application/didcomm-encrypted+json)",
                    "type": "string"
                }
            }
        },
        "types.EncryptedAttachment": {
            "type": "object",
            "required": [
                "data",
                "id",
                "mediaType"
            ],
            "properties": {
                "data": {
                    "description": "the encrypted message body",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.EncryptedAttachmentData"
                        }
                    ]
                },
                "description": {
                    "description": "a human-readable description of the attachment (optional)",
                    "type": "string"
                },
                "id": {
                    "description": "a globally unique identifier for the attachment",
                    "type": "string"
                },
                "mediaType": {
                    "description": "the media type of the attachment",
                    "type": "string"
                }
            }
        },
        "types.EncryptedAttachmentData": {
            "type": "object",
            "required": [
                "json"
            ],
            "properties": {
                "json": {
                    "$ref": "#/definitions/types.EncryptedBody"
                }
            }
        },
        "types.EncryptedBody": {
            "type": "object",
            "required": [
                "ciphertext",
                "iv",
                "protected",
                "recipients",
                "signature",
                "tag"
            ],
            "properties": {
                "ciphertext": {
                    "description": "the encrypted message",
                    "type": "string"
                },
                "iv": {
                    "description": "the initialization vector (nonce)",
                    "type": "string"
                },
                "protected": {
                    "description": "the protected header",
                    "type": "string"
                },
                "recipients": {
                    "description": "the recipients of the message (at least one)",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/types.Recipient"
                    }
                },
                "signature": {
                    "description": "JWS digital signature",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.Signature"
                        }
                    ]
                },
                "tag": {
                    "description": "integrity check on the encrypted message",
                    "type": "string"
                }
            }
        },
        "types.Epk": {
            "type": "object",
            "required": [
                "crv",
                "kty",
                "x"
            ],
            "properties": {
                "crv": {
                    "description": "The curve parameter used for the key",
                    "type": "string"
                },
                "kty": {
                    "description": "Key Type, indicating the type of key used, such as an elliptic curve key (\"OKP\" for Octet Key Pair).",
                    "type": "string"
                },
                "x": {
                    "description": "The X coordinate for the elliptic curve point",
                    "type": "string"
                }
            }
        },
        "types.Handshake": {
            "type": "object",
            "properties": {
                "cborPayloadBase64": {
                    "description": "payload in cbor format of handshake Content",
                    "type": "string"
                },
                "content": {
                    "$ref": "#/definitions/types.HandshakeContent"
                },
                "signatureBase64": {
                    "type": "string"
                }
            }
        },
        "types.HandshakeContent": {
            "type": "object",
            "properties": {
                "handshakeId": {
                    "description": "handshake ID",
                    "type": "string"
                },
                "level": {
                    "description": "handshake level",
                    "type": "string"
                },
                "originServer": {
                    "description": "origin server",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.HandshakeOriginServer"
                        }
                    ]
                },
                "ownerAddress": {
                    "description": "mailio address of the owner of the handshake",
                    "type": "string"
                },
                "ownerPublicKey": {
                    "description": "owner public key of the owner of the handshake",
                    "type": "string"
                },
                "senderMetadata": {
                    "description": "sender meta data (either Mailio address or sha512 email address )",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.SenderMetadata"
                        }
                    ]
                },
                "signatureBase64": {
                    "description": "owners signature of the handshake",
                    "type": "string"
                },
                "signatureScheme": {
                    "description": "handshake signature scheme",
                    "type": "string"
                },
                "signupRules": {
                    "description": "handshake signup rules",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.HandshakeSignupRules"
                        }
                    ]
                },
                "signupSubType": {
                    "description": "handshake signup sub type",
                    "type": "integer"
                },
                "status": {
                    "description": "handshake status",
                    "type": "string"
                },
                "timestamp": {
                    "description": "timestamp of the handshake",
                    "type": "integer"
                },
                "type": {
                    "description": "handshake type",
                    "type": "string"
                }
            }
        },
        "types.HandshakeHeader": {
            "type": "object",
            "required": [
                "signatureScheme",
                "timestamp"
            ],
            "properties": {
                "emailLookupHashScheme": {
                    "type": "string"
                },
                "signatureScheme": {
                    "type": "string",
                    "enum": [
                        "EdDSA_X25519"
                    ]
                },
                "timestamp": {
                    "type": "integer"
                }
            }
        },
        "types.HandshakeLink": {
            "type": "object",
            "properties": {
                "link": {
                    "type": "string"
                }
            }
        },
        "types.HandshakeLookup": {
            "type": "object",
            "required": [
                "originServer"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "emailHash": {
                    "description": "scrypt hash of the email address",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "originServer": {
                    "$ref": "#/definitions/types.HandshakeOriginServer"
                }
            }
        },
        "types.HandshakeOriginServer": {
            "type": "object",
            "required": [
                "domain"
            ],
            "properties": {
                "domain": {
                    "description": "required",
                    "type": "string"
                },
                "ip": {
                    "description": "optional",
                    "type": "string"
                }
            }
        },
        "types.HandshakeRequest": {
            "type": "object",
            "required": [
                "handshakeHeader",
                "handshakeLookups",
                "senderAddress"
            ],
            "properties": {
                "handshakeHeader": {
                    "$ref": "#/definitions/types.HandshakeHeader"
                },
                "handshakeLookups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.HandshakeLookup"
                    }
                },
                "returnDefaultServerHandshake": {
                    "description": "default false",
                    "type": "boolean"
                },
                "senderAddress": {
                    "description": "intended senders Mailio address",
                    "type": "string"
                }
            }
        },
        "types.HandshakeResponse": {
            "type": "object",
            "required": [
                "handshakeHeader",
                "handshakes"
            ],
            "properties": {
                "handshakeHeader": {
                    "$ref": "#/definitions/types.HandshakeHeader"
                },
                "handshakes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.HandshakeContent"
                    }
                }
            }
        },
        "types.HandshakeSignedRequest": {
            "type": "object",
            "required": [
                "cborPayloadBase64",
                "handshakeRequest",
                "senderDomain",
                "signatureBase64"
            ],
            "properties": {
                "cborPayloadBase64": {
                    "type": "string"
                },
                "handshakeRequest": {
                    "$ref": "#/definitions/types.HandshakeRequest"
                },
                "senderDomain": {
                    "description": "origin of the request (where DNS is published with Mailio public key)",
                    "type": "string"
                },
                "signatureBase64": {
                    "type": "string"
                }
            }
        },
        "types.HandshakeSignedResponse": {
            "type": "object",
            "required": [
                "cborPayloadBase64",
                "handshakeResponse",
                "signatureBase64"
            ],
            "properties": {
                "cborPayloadBase64": {
                    "type": "string"
                },
                "handshakeResponse": {
                    "$ref": "#/definitions/types.HandshakeResponse"
                },
                "signatureBase64": {
                    "type": "string"
                }
            }
        },
        "types.HandshakeSignupRules": {
            "type": "object",
            "properties": {
                "frequencyMinutes": {
                    "description": "optional",
                    "type": "integer"
                }
            }
        },
        "types.Header": {
            "type": "object",
            "required": [
                "epk",
                "kid"
            ],
            "properties": {
                "epk": {
                    "description": "(Ephemeral Public Key): A temporary public key that was used in conjunction with the recipient's public key to encrypt the encrypted_key",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.Epk"
                        }
                    ]
                },
                "kid": {
                    "description": "(Key ID): A hint indicating which key was used to encrypt the",
                    "type": "string"
                }
            }
        },
        "types.InputHandshakeLookup": {
            "type": "object",
            "properties": {
                "lookups": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/types.HandshakeLookup"
                    }
                }
            }
        },
        "types.InputLogin": {
            "type": "object",
            "required": [
                "ed25519SigningPublicKeyBase64",
                "email",
                "mailioAddress",
                "nonce",
                "signatureBase64"
            ],
            "properties": {
                "ed25519SigningPublicKeyBase64": {
                    "description": "public key of the private key used to sign the nonce",
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "mailioAddress": {
                    "type": "string"
                },
                "nonce": {
                    "type": "string"
                },
                "signatureBase64": {
                    "description": "signature of Nonce string",
                    "type": "string"
                }
            }
        },
        "types.InputRegister": {
            "type": "object",
            "required": [
                "databasePassword",
                "ed25519SigningPublicKeyBase64",
                "email",
                "mailioAddress",
                "nonce",
                "signatureBase64",
                "x25519PublicKeyBase64"
            ],
            "properties": {
                "databasePassword": {
                    "description": "this is a password for couchdbs private user database",
                    "type": "string"
                },
                "ed25519SigningPublicKeyBase64": {
                    "description": "public key of the private key used to sign the nonce",
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "mailioAddress": {
                    "type": "string"
                },
                "nonce": {
                    "type": "string"
                },
                "signatureBase64": {
                    "description": "signature of Nonce string",
                    "type": "string"
                },
                "x25519PublicKeyBase64": {
                    "description": "public encryption key",
                    "type": "string"
                }
            }
        },
        "types.JwsToken": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "types.NonceResponse": {
            "type": "object",
            "properties": {
                "nonce": {
                    "type": "string"
                }
            }
        },
        "types.OutputFindAddress": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                }
            }
        },
        "types.PagingResults": {
            "type": "object",
            "properties": {
                "bookmark": {
                    "type": "string"
                },
                "docs": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "types.Recipient": {
            "type": "object",
            "required": [
                "encrypted_key",
                "header"
            ],
            "properties": {
                "encrypted_key": {
                    "description": "Tthe key used to encrypt the ciphertext, encrypted with the recipient's public key",
                    "type": "string"
                },
                "header": {
                    "description": "encryption parameters specific to each recipient",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.Header"
                        }
                    ]
                }
            }
        },
        "types.SenderMetadata": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "mailio address",
                    "type": "string"
                },
                "emailHash": {
                    "description": "scrypt hash of the email address",
                    "type": "string"
                }
            }
        },
        "types.Signature": {
            "type": "object",
            "properties": {
                "payload": {
                    "description": "The payload that was signed, which is base64URL encoded.",
                    "type": "string"
                },
                "signatures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.SignatureDetail"
                    }
                }
            }
        },
        "types.SignatureDetail": {
            "type": "object",
            "properties": {
                "protected": {
                    "description": "Base64URL encoded JSON string containing the header parameters used for the signature",
                    "type": "string"
                },
                "signature": {
                    "type": "string"
                }
            }
        },
        "types.VCValidationResponse": {
            "type": "object",
            "properties": {
                "requestId": {
                    "type": "string"
                },
                "valid": {
                    "type": "boolean"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Mailio Server API",
	Description:      "Implements the Mailio server based on https://mirs.mail.io/ specifications",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}

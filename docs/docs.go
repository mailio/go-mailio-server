// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/.well-known/did-configuration.json": {
            "get": {
                "description": "Returns a DID Configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Decentralized Identifiers"
                ],
                "summary": "Mailio Server DID Configuration",
                "responses": {
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "500": {
                        "description": "error creating server did configuration",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/.well-known/did.json": {
            "get": {
                "description": "Returns a DID Document",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Decentralized Identifiers"
                ],
                "summary": "Mailio Server DID Document (public keys)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/did.Document"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "500": {
                        "description": "error creating server did",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/credentials/list/{address}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retruns a list of VCs by mailio address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Verifiable Credentials"
                ],
                "summary": "List all VCs for a specific mailio address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Mailio address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit of VCs to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page token",
                        "name": "pageToken",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/did.Document"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "500": {
                        "description": "error creating server did",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/credentials/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Returns a single verifiable credential by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Verifiable Credentials"
                ],
                "summary": "Get verifiable credential by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "VC ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/did.VerifiableCredential"
                        }
                    },
                    "404": {
                        "description": "VC not found",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "500": {
                        "description": "error creating server did",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/credentials/{requestId}/verify": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Checks if signature is valid and returns a boolean object",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Verifiable Credentials"
                ],
                "summary": "Verify a verifiable credential",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Reference ID (request ID, could be anything)",
                        "name": "requestId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Verifiable credential to verify",
                        "name": "vc",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/did.VerifiableCredential"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.VCValidationResponse"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/domains": {
            "get": {
                "description": "Returns a list of all supported domains",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Domains"
                ],
                "summary": "List all domains",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.UserDomain"
                            }
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "500": {
                        "description": "error creating server did",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/findaddress": {
            "get": {
                "description": "Returns a mailio address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Account"
                ],
                "summary": "Find user by base64 scrypt email address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Base64 formatted Scrypt of email address",
                        "name": "email",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.OutputUserAddress"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/handshake": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "List all handshakes",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Handshake"
                ],
                "summary": "List handshakes (default 10 results)",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "max number of results",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "paging token",
                        "name": "bookmark",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.PagingResults"
                        }
                    },
                    "401": {
                        "description": "not authorized",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new handshake",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Handshake"
                ],
                "summary": "Create a new handshake",
                "parameters": [
                    {
                        "description": "Handshake",
                        "name": "handshake",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.Handshake"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.Handshake"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "401": {
                        "description": "invalid signature/not authorized",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/handshake/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Returns a single handshake by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Handshake"
                ],
                "summary": "Get handshake by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Handshake ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Handshake"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a handshake",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Handshake"
                ],
                "summary": "Update a handshake",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Handshake ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Handshake",
                        "name": "handshake",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.Handshake"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Handshake"
                        }
                    },
                    "401": {
                        "description": "not authorized",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a handshake",
                "tags": [
                    "Handshake"
                ],
                "summary": "Delete a handshake",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Handshake ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "not authorized",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/handshakefetch": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Request handshake from origin server (digitally signed)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Handshake"
                ],
                "summary": "Request handshake from origin server (digitally signed) if missing in local database",
                "parameters": [
                    {
                        "description": "InputHandshakeLookup",
                        "name": "handshake",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.InputHandshakeLookup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.HandshakeLookupResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "401": {
                        "description": "invalid signature",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/handshakeoffer": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create personal handshake link",
                "tags": [
                    "Handshake"
                ],
                "summary": "Create personal handshake link",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.HandshakeLink"
                        }
                    },
                    "401": {
                        "description": "not authorized",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/login": {
            "post": {
                "description": "Returns a JWS token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Account"
                ],
                "summary": "Login with username and password",
                "parameters": [
                    {
                        "description": "login input",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.InputLogin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.JwsToken"
                        }
                    },
                    "400": {
                        "description": "Invalid or missing input parameters",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "401": {
                        "description": "Invalid signature",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "403": {
                        "description": "Failed to login (valid signature, no valid VC)",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "404": {
                        "description": "Failed to login (user not registered)",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/logout": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Logout user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Account"
                ],
                "summary": "Logout user",
                "responses": {
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/mtp/did": {
            "post": {
                "description": "Request did documents from this server by email hash (must be digitally signed bny senders Mailio server)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mailio Transfer Protocol"
                ],
                "summary": "Request did docouments from this server (must be digitally signed by senders Mailio server)",
                "parameters": [
                    {
                        "description": "DIDDocumentSignedRequest",
                        "name": "handshake",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.DIDDocumentSignedRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.DIDDocumentSignedResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "401": {
                        "description": "invalid signature",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/mtp/handshake": {
            "post": {
                "description": "Request handshake from this server (must be digitally signed by senders Mailio server)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mailio Transfer Protocol"
                ],
                "summary": "Request handshake from this server (must be digitally signed by senders Mailio server)",
                "parameters": [
                    {
                        "description": "HandshakeSignedRequest",
                        "name": "handshake",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.HandshakeSignedRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.HandshakeSignedResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "401": {
                        "description": "invalid signature",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/mtp/message": {
            "post": {
                "description": "Receive end-to-end encrypted message (signed by senders Mailio server)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mailio Transfer Protocol"
                ],
                "summary": "Receive end-to-end encrypted message (signed by senders Mailio server)",
                "parameters": [
                    {
                        "description": "didcomm signed request",
                        "name": "handshake",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.DIDCommSignedRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.DIDCommApiResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "401": {
                        "description": "invalid signature",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/nonce": {
            "get": {
                "description": "Returns a nonce which client needs to sign with their private key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Account"
                ],
                "summary": "Login and Registration challenge nonce",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.NonceResponse"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/nonce/{id}": {
            "delete": {
                "description": "Deletes nonce if it exists",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Account"
                ],
                "summary": "Deletes nonce if it exists",
                "parameters": [
                    {
                        "type": "string",
                        "description": "nonce id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.NonceResponse"
                        }
                    },
                    "404": {
                        "description": "not found",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/register": {
            "post": {
                "description": "Returns a JWS token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Account"
                ],
                "summary": "Register user",
                "parameters": [
                    {
                        "description": "registration input",
                        "name": "registration",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.InputRegister"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.JwsToken"
                        }
                    },
                    "401": {
                        "description": "Invalid signature",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "404": {
                        "description": "Invalid input parameters",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "409": {
                        "description": "User already exists",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/resolve/did": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Fetch all DID documents by email hash (local and remote)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Messaging"
                ],
                "summary": "Fetch all DID documents by email hash (local and remote)",
                "parameters": [
                    {
                        "description": "InputDIDLookup",
                        "name": "lookups",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.InputDIDLookup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.OutputDIDLookup"
                        }
                    },
                    "400": {
                        "description": "invalid email address",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "404": {
                        "description": "DID not found",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "500": {
                        "description": "error fetching did documents",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/resolve/domain": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Identify if an email is a DIDcomm/Mailio or SMTP address, and resolve the DID if it’s from a Mailio server.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Messaging"
                ],
                "summary": "Resolve domain from email address (smtp or mailio)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "valid email address",
                        "name": "email",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "force DNS update",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Domain"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "401": {
                        "description": "invalid signature or unauthorized to send messages",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/resolve/webdid": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Fetch all DID documents by Web DID (local and remote)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Messaging"
                ],
                "summary": "Fetch all DID documents by Web DID (local and remote)",
                "parameters": [
                    {
                        "description": "InputWebDIDLookup",
                        "name": "webdid",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.InputWebDIDLookup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.OutputDIDLookup"
                        }
                    },
                    "400": {
                        "description": "invalid DID resolution",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "404": {
                        "description": "DID not found",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/s3": {
            "delete": {
                "description": "Delete object from s3 bucket (only in logged in users folder)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "S3"
                ],
                "summary": "Delete object from s3 bucket",
                "parameters": [
                    {
                        "description": "list of ObjectKeys",
                        "name": "objectKeys",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.ArrayOfStrings"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.PresignedUrl"
                            }
                        }
                    },
                    "400": {
                        "description": "invalid api call",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "500": {
                        "description": "error deletin object",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/s3presign": {
            "get": {
                "description": "The presigned request is valid for the specified number of seconds.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "S3"
                ],
                "summary": "GetObject makes a presigned request that can be used to get an object from a bucket.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "objectKey",
                        "name": "objectKey",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "method",
                        "name": "method",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.PresignedUrl"
                        }
                    },
                    "400": {
                        "description": "invalid api call",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "500": {
                        "description": "error creating presigned url",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/sendcancel": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Cancel send (SMTP or DIDComm)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Messaging"
                ],
                "summary": "Cancel send (SMTP or DIDComm)",
                "parameters": [
                    {
                        "description": "task ids to cancel",
                        "name": "email",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.DIDCommApiResponse"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/types.DIDCommApiResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "401": {
                        "description": "invalid signature or unauthorized to cancel messages",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "403": {
                        "description": "user not authorized",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/senddid": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Send end-to-end encrypted message to DID recipients",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Messaging"
                ],
                "summary": "Send end-to-end encrypted message to DID recipients",
                "parameters": [
                    {
                        "description": "didcomm-encrypted+json",
                        "name": "handshake",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.DIDCommMessage"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/types.DIDCommApiResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "401": {
                        "description": "invalid signature or unauthorized to send messages",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/sendsmtp": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Send SMTP email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Messaging"
                ],
                "summary": "Send SMTP email",
                "parameters": [
                    {
                        "description": "smtp email",
                        "name": "email",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/mailiosmtp.Mail"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/mailiosmtp.Mail"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "401": {
                        "description": "invalid signature or unauthorized to send messages",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "403": {
                        "description": "user not authorized",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "413": {
                        "description": "message too large",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "422": {
                        "description": "no recipient/no subject body/too many attachments",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/user/me": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get logged in users basic information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Account"
                ],
                "summary": "Get logged inusers basic information",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.OutputBasicUserInfo"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/verify_cookie": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get logged in users smartkey based on a JWS token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Account"
                ],
                "summary": "Get logged in users smartkey based on a JWS token",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.JwsTokenWithSmartKey"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/webauthn/login_options": {
            "get": {
                "description": "LoginOptions return WebAuthN login options",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "WebAuthn"
                ],
                "summary": "LoginOptions return login options",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/protocol.PublicKeyCredentialRequestOptions"
                        }
                    },
                    "400": {
                        "description": "invalid input parameters",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/webauthn/login_verify": {
            "post": {
                "description": "LoginOptions return WebAuthN login options",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "WebAuthn"
                ],
                "summary": "LoginOptions return login options",
                "parameters": [
                    {
                        "description": "Credential Assertion Data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/protocol.ParsedCredentialAssertionData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/protocol.PublicKeyCredentialRequestOptions"
                        }
                    },
                    "400": {
                        "description": "invalid input parameters",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/webauthn/registration_options": {
            "get": {
                "description": "Registration options for a new WebAuthn device",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "WebAuthn"
                ],
                "summary": "Registration options for a new WebAuthn device",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Email address to register",
                        "name": "email",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/protocol.PublicKeyCredentialCreationOptions"
                        }
                    },
                    "400": {
                        "description": "invalid email address",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/api/v1/webauthn/registration_verify": {
            "post": {
                "description": "WebAuthnVerifyRegistration check the signed digital challenge",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "WebAuthn"
                ],
                "summary": "WebAuthnVerifyRegistration check the validity of the registration",
                "parameters": [
                    {
                        "description": "Attestation object + Encrypted SmartKey payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.WebauthRegistrationVerify"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JWS",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "invalid input parameters",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/webhook/mailgun_mime": {
            "post": {
                "description": "Receive a new SMTP email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Smtp Webhook Handler"
                ],
                "summary": "Receive a new SMTP email",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "401": {
                        "description": "invalid signature/not authorized",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/{address}/did.json": {
            "get": {
                "description": "Returns users DID document based on mailio address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Decentralized Identifiers"
                ],
                "summary": "Resolve users DID document",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Mailio address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/did.Document"
                        }
                    },
                    "400": {
                        "description": "Invalid DID",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "404": {
                        "description": "DID not found",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "429": {
                        "description": "rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.ApiError": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Code is the HTTP status code",
                    "type": "integer"
                },
                "message": {
                    "description": "Message is the error message",
                    "type": "string"
                }
            }
        },
        "did.AuthorizedApplication": {
            "type": "object",
            "properties": {
                "approvalDate": {
                    "type": "string"
                },
                "domains": {
                    "description": "domains of the auth application: [example.com]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "description": "target application did: did:example:123456789abcdefghi",
                    "type": "string"
                },
                "userPermissions": {
                    "description": "optional list of permissions specific to a target application",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "did.CredentialStatus": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "https://example.edu/status/24\"",
                    "type": "string"
                },
                "type": {
                    "description": "CredentialStatusList2017",
                    "type": "string"
                }
            }
        },
        "did.CredentialSubject": {
            "type": "object",
            "properties": {
                "authorizedApplication": {
                    "$ref": "#/definitions/did.AuthorizedApplication"
                },
                "id": {
                    "type": "string"
                },
                "origin": {
                    "type": "string"
                }
            }
        },
        "did.DID": {
            "type": "object"
        },
        "did.Document": {
            "type": "object",
            "properties": {
                "@context": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "alsoKnownAs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "authentication": {
                    "type": "array",
                    "items": {}
                },
                "id": {
                    "$ref": "#/definitions/did.DID"
                },
                "keyAgreement": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/did.KeyAgreement"
                    }
                },
                "service": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/did.Service"
                    }
                },
                "verificationMethod": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/did.VerificationMethod"
                    }
                }
            }
        },
        "did.KeyAgreement": {
            "type": "object",
            "properties": {
                "controller": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "publicKeyJwk": {
                    "$ref": "#/definitions/did.PublicKeyJwk"
                },
                "publicKeyMultibase": {
                    "type": "string"
                },
                "type": {
                    "description": "usually X25519KeyAgreementKey2019",
                    "type": "string"
                }
            }
        },
        "did.Proof": {
            "type": "object",
            "properties": {
                "challenge": {
                    "description": "prevent replay attacks",
                    "type": "string"
                },
                "created": {
                    "type": "string"
                },
                "domain": {
                    "description": "prevent replay attacks",
                    "type": "string"
                },
                "jws": {
                    "type": "string"
                },
                "proofPurpose": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "verificationMethod": {
                    "type": "string"
                }
            }
        },
        "did.PublicKeyJwk": {
            "type": "object",
            "properties": {
                "key": {}
            }
        },
        "did.Service": {
            "type": "object",
            "properties": {
                "accept": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "routingKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "serviceEndpoint": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "did.VerifiableCredential": {
            "type": "object",
            "properties": {
                "@context": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "credentialStatus": {
                    "$ref": "#/definitions/did.CredentialStatus"
                },
                "credentialSubject": {
                    "$ref": "#/definitions/did.CredentialSubject"
                },
                "id": {
                    "type": "string"
                },
                "issuanceDate": {
                    "type": "string"
                },
                "issuer": {
                    "type": "string"
                },
                "proof": {
                    "$ref": "#/definitions/did.Proof"
                },
                "type": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "did.VerificationMethod": {
            "type": "object",
            "properties": {
                "controller": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "publicKeyJwk": {
                    "$ref": "#/definitions/did.PublicKeyJwk"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "mailiosmtp.Mail": {
            "type": "object"
        },
        "protocol.AttestedCredentialData": {
            "type": "object",
            "properties": {
                "aaguid": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "credential_id": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "public_key": {
                    "description": "The raw credential public key bytes received from the attestation data.",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "protocol.AuthenticationExtensions": {
            "type": "object",
            "additionalProperties": true
        },
        "protocol.AuthenticationExtensionsClientOutputs": {
            "type": "object",
            "additionalProperties": true
        },
        "protocol.AuthenticatorAssertionResponse": {
            "type": "object",
            "properties": {
                "authenticatorData": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "clientDataJSON": {
                    "description": "From the spec https://www.w3.org/TR/webauthn/#dom-authenticatorresponse-clientdatajson\nThis attribute contains a JSON serialization of the client data passed to the authenticator\nby the client in its call to either create() or get().",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "signature": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "userHandle": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "protocol.AuthenticatorAttachment": {
            "type": "string",
            "enum": [
                "platform",
                "cross-platform"
            ],
            "x-enum-varnames": [
                "Platform",
                "CrossPlatform"
            ]
        },
        "protocol.AuthenticatorData": {
            "type": "object",
            "properties": {
                "att_data": {
                    "$ref": "#/definitions/protocol.AttestedCredentialData"
                },
                "ext_data": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "flags": {
                    "$ref": "#/definitions/protocol.AuthenticatorFlags"
                },
                "rpid": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "sign_count": {
                    "type": "integer"
                }
            }
        },
        "protocol.AuthenticatorFlags": {
            "type": "integer",
            "enum": [
                1,
                2,
                4,
                8,
                16,
                32,
                64,
                128
            ],
            "x-enum-comments": {
                "FlagBackupEligible": "Referred to as BE",
                "FlagUserPresent": "Referred to as UP"
            },
            "x-enum-varnames": [
                "FlagUserPresent",
                "FlagRFU1",
                "FlagUserVerified",
                "FlagBackupEligible",
                "FlagBackupState",
                "FlagRFU2",
                "FlagAttestedCredentialData",
                "FlagHasExtensions"
            ]
        },
        "protocol.AuthenticatorSelection": {
            "type": "object",
            "properties": {
                "authenticatorAttachment": {
                    "description": "AuthenticatorAttachment If this member is present, eligible authenticators are filtered to only\nauthenticators attached with the specified AuthenticatorAttachment enum.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/protocol.AuthenticatorAttachment"
                        }
                    ]
                },
                "requireResidentKey": {
                    "description": "RequireResidentKey this member describes the Relying Party's requirements regarding resident\ncredentials. If the parameter is set to true, the authenticator MUST create a client-side-resident\npublic key credential source when creating a public key credential.",
                    "type": "boolean"
                },
                "residentKey": {
                    "description": "ResidentKey this member describes the Relying Party's requirements regarding resident\ncredentials per Webauthn Level 2.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/protocol.ResidentKeyRequirement"
                        }
                    ]
                },
                "userVerification": {
                    "description": "UserVerification This member describes the Relying Party's requirements regarding user verification for\nthe create() operation. Eligible authenticators are filtered to only those capable of satisfying this\nrequirement.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/protocol.UserVerificationRequirement"
                        }
                    ]
                }
            }
        },
        "protocol.AuthenticatorTransport": {
            "type": "string",
            "enum": [
                "usb",
                "nfc",
                "ble",
                "hybrid",
                "internal"
            ],
            "x-enum-varnames": [
                "USB",
                "NFC",
                "BLE",
                "Hybrid",
                "Internal"
            ]
        },
        "protocol.CeremonyType": {
            "type": "string",
            "enum": [
                "webauthn.create",
                "webauthn.get"
            ],
            "x-enum-varnames": [
                "CreateCeremony",
                "AssertCeremony"
            ]
        },
        "protocol.CollectedClientData": {
            "type": "object",
            "properties": {
                "challenge": {
                    "type": "string"
                },
                "new_keys_may_be_added_here": {
                    "description": "Chromium (Chrome) returns a hint sometimes about how to handle clientDataJSON in a safe manner.",
                    "type": "string"
                },
                "origin": {
                    "type": "string"
                },
                "tokenBinding": {
                    "$ref": "#/definitions/protocol.TokenBinding"
                },
                "type": {
                    "description": "Type the string \"webauthn.create\" when creating new credentials,\nand \"webauthn.get\" when getting an assertion from an existing credential. The\npurpose of this member is to prevent certain types of signature confusion attacks\n(where an attacker substitutes one legitimate signature for another).",
                    "allOf": [
                        {
                            "$ref": "#/definitions/protocol.CeremonyType"
                        }
                    ]
                }
            }
        },
        "protocol.ConveyancePreference": {
            "type": "string",
            "enum": [
                "none",
                "indirect",
                "direct",
                "enterprise"
            ],
            "x-enum-varnames": [
                "PreferNoAttestation",
                "PreferIndirectAttestation",
                "PreferDirectAttestation",
                "PreferEnterpriseAttestation"
            ]
        },
        "protocol.CredentialAssertionResponse": {
            "type": "object",
            "properties": {
                "authenticatorAttachment": {
                    "type": "string"
                },
                "clientExtensionResults": {
                    "$ref": "#/definitions/protocol.AuthenticationExtensionsClientOutputs"
                },
                "id": {
                    "description": "ID is The credential’s identifier. The requirements for the\nidentifier are distinct for each type of credential. It might\nrepresent a username for username/password tuples, for example.",
                    "type": "string"
                },
                "rawId": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "response": {
                    "$ref": "#/definitions/protocol.AuthenticatorAssertionResponse"
                },
                "type": {
                    "description": "Type is the value of the object’s interface object's [[type]] slot,\nwhich specifies the credential type represented by this object.\nThis should be type \"public-key\" for Webauthn credentials.",
                    "type": "string"
                }
            }
        },
        "protocol.CredentialDescriptor": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "CredentialID The ID of a credential to allow/disallow.",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "transports": {
                    "description": "The authenticator transports that can be used.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/protocol.AuthenticatorTransport"
                    }
                },
                "type": {
                    "description": "The valid credential types.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/protocol.CredentialType"
                        }
                    ]
                }
            }
        },
        "protocol.CredentialParameter": {
            "type": "object",
            "properties": {
                "alg": {
                    "$ref": "#/definitions/webauthncose.COSEAlgorithmIdentifier"
                },
                "type": {
                    "$ref": "#/definitions/protocol.CredentialType"
                }
            }
        },
        "protocol.CredentialType": {
            "type": "string",
            "enum": [
                "public-key"
            ],
            "x-enum-varnames": [
                "PublicKeyCredentialType"
            ]
        },
        "protocol.ParsedAssertionResponse": {
            "type": "object",
            "properties": {
                "authenticatorData": {
                    "$ref": "#/definitions/protocol.AuthenticatorData"
                },
                "collectedClientData": {
                    "$ref": "#/definitions/protocol.CollectedClientData"
                },
                "signature": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "userHandle": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "protocol.ParsedCredentialAssertionData": {
            "type": "object",
            "properties": {
                "authenticatorAttachment": {
                    "$ref": "#/definitions/protocol.AuthenticatorAttachment"
                },
                "clientExtensionResults": {
                    "$ref": "#/definitions/protocol.AuthenticationExtensionsClientOutputs"
                },
                "id": {
                    "type": "string"
                },
                "raw": {
                    "$ref": "#/definitions/protocol.CredentialAssertionResponse"
                },
                "rawId": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "response": {
                    "$ref": "#/definitions/protocol.ParsedAssertionResponse"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "protocol.PublicKeyCredentialCreationOptions": {
            "type": "object",
            "properties": {
                "attestation": {
                    "$ref": "#/definitions/protocol.ConveyancePreference"
                },
                "authenticatorSelection": {
                    "$ref": "#/definitions/protocol.AuthenticatorSelection"
                },
                "challenge": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "excludeCredentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/protocol.CredentialDescriptor"
                    }
                },
                "extensions": {
                    "$ref": "#/definitions/protocol.AuthenticationExtensions"
                },
                "pubKeyCredParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/protocol.CredentialParameter"
                    }
                },
                "rp": {
                    "$ref": "#/definitions/protocol.RelyingPartyEntity"
                },
                "timeout": {
                    "type": "integer"
                },
                "user": {
                    "$ref": "#/definitions/protocol.UserEntity"
                }
            }
        },
        "protocol.PublicKeyCredentialRequestOptions": {
            "type": "object",
            "properties": {
                "allowCredentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/protocol.CredentialDescriptor"
                    }
                },
                "challenge": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "extensions": {
                    "$ref": "#/definitions/protocol.AuthenticationExtensions"
                },
                "rpId": {
                    "type": "string"
                },
                "timeout": {
                    "type": "integer"
                },
                "userVerification": {
                    "$ref": "#/definitions/protocol.UserVerificationRequirement"
                }
            }
        },
        "protocol.RelyingPartyEntity": {
            "type": "object",
            "properties": {
                "icon": {
                    "description": "A serialized URL which resolves to an image associated with the entity. For example,\nthis could be a user’s avatar or a Relying Party's logo. This URL MUST be an a priori\nauthenticated URL. Authenticators MUST accept and store a 128-byte minimum length for\nan icon member’s value. Authenticators MAY ignore an icon member’s value if its length\nis greater than 128 bytes. The URL’s scheme MAY be \"data\" to avoid fetches of the URL,\nat the cost of needing more storage.\n\nDeprecated: this has been removed from the specification recommendations.",
                    "type": "string"
                },
                "id": {
                    "description": "A unique identifier for the Relying Party entity, which sets the RP ID.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-palatable name for the entity. Its function depends on what the PublicKeyCredentialEntity represents:\n\nWhen inherited by PublicKeyCredentialRpEntity it is a human-palatable identifier for the Relying Party,\nintended only for display. For example, \"ACME Corporation\", \"Wonderful Widgets, Inc.\" or \"ОАО Примертех\".\n\nWhen inherited by PublicKeyCredentialUserEntity, it is a human-palatable identifier for a user account. It is\nintended only for display, i.e., aiding the user in determining the difference between user accounts with similar\ndisplayNames. For example, \"alexm\", \"alex.p.mueller@example.com\" or \"+14255551234\".",
                    "type": "string"
                }
            }
        },
        "protocol.ResidentKeyRequirement": {
            "type": "string",
            "enum": [
                "discouraged",
                "preferred",
                "required"
            ],
            "x-enum-varnames": [
                "ResidentKeyRequirementDiscouraged",
                "ResidentKeyRequirementPreferred",
                "ResidentKeyRequirementRequired"
            ]
        },
        "protocol.TokenBinding": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/protocol.TokenBindingStatus"
                }
            }
        },
        "protocol.TokenBindingStatus": {
            "type": "string",
            "enum": [
                "present",
                "supported",
                "not-supported"
            ],
            "x-enum-varnames": [
                "Present",
                "Supported",
                "NotSupported"
            ]
        },
        "protocol.UserEntity": {
            "type": "object",
            "properties": {
                "displayName": {
                    "description": "A human-palatable name for the user account, intended only for display.\nFor example, \"Alex P. Müller\" or \"田中 倫\". The Relying Party SHOULD let\nthe user choose this, and SHOULD NOT restrict the choice more than necessary.",
                    "type": "string"
                },
                "icon": {
                    "description": "A serialized URL which resolves to an image associated with the entity. For example,\nthis could be a user’s avatar or a Relying Party's logo. This URL MUST be an a priori\nauthenticated URL. Authenticators MUST accept and store a 128-byte minimum length for\nan icon member’s value. Authenticators MAY ignore an icon member’s value if its length\nis greater than 128 bytes. The URL’s scheme MAY be \"data\" to avoid fetches of the URL,\nat the cost of needing more storage.\n\nDeprecated: this has been removed from the specification recommendations.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the user handle of the user account entity. To ensure secure operation,\nauthentication and authorization decisions MUST be made on the basis of this id\nmember, not the displayName nor name members. See Section 6.1 of\n[RFC8266](https://www.w3.org/TR/webauthn/#biblio-rfc8266)."
                },
                "name": {
                    "description": "A human-palatable name for the entity. Its function depends on what the PublicKeyCredentialEntity represents:\n\nWhen inherited by PublicKeyCredentialRpEntity it is a human-palatable identifier for the Relying Party,\nintended only for display. For example, \"ACME Corporation\", \"Wonderful Widgets, Inc.\" or \"ОАО Примертех\".\n\nWhen inherited by PublicKeyCredentialUserEntity, it is a human-palatable identifier for a user account. It is\nintended only for display, i.e., aiding the user in determining the difference between user accounts with similar\ndisplayNames. For example, \"alexm\", \"alex.p.mueller@example.com\" or \"+14255551234\".",
                    "type": "string"
                }
            }
        },
        "protocol.UserVerificationRequirement": {
            "type": "string",
            "enum": [
                "required",
                "preferred",
                "discouraged"
            ],
            "x-enum-comments": {
                "VerificationPreferred": "This is the default"
            },
            "x-enum-varnames": [
                "VerificationRequired",
                "VerificationPreferred",
                "VerificationDiscouraged"
            ]
        },
        "types.ArrayOfStrings": {
            "type": "object",
            "required": [
                "values"
            ],
            "properties": {
                "values": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "types.DIDCommApiResponse": {
            "type": "object",
            "properties": {
                "didCommId": {
                    "type": "string"
                },
                "mtpStatusCodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.MTPStatusCode"
                    }
                },
                "smtpId": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "types.DIDCommMessage": {
            "type": "object",
            "required": [
                "from",
                "type"
            ],
            "properties": {
                "attachments": {
                    "description": "attachments to the message                                                // MTP status message",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.MailioAttachment"
                    }
                },
                "body": {
                    "description": "the body attribute contains all the data and structure defined uniquely for the schema associated with the type attribute. It MUST be a JSON object conforming to RFC 7159                              // the encrypted message body",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.EncryptedBody"
                        }
                    ]
                },
                "createdTime": {
                    "description": "time of message creation in UTC milliseconds since epoch",
                    "type": "integer"
                },
                "expiresTime": {
                    "description": "sender will abort the protocol if it doesn't get a response by this time (UTC milliseconds since epoch)",
                    "type": "integer"
                },
                "from": {
                    "description": "sender DID required because all mailio messages are encrypted",
                    "type": "string"
                },
                "fromPrior": {
                    "description": "A DID is rotated by sending a message of any type to the recipient to be notified of the rotation",
                    "type": "string"
                },
                "id": {
                    "description": "globally unique message identifier UUID (RFC 4122) recommended",
                    "type": "string"
                },
                "intent": {
                    "description": "the intent of the message (if empty, ordinary message",
                    "type": "string",
                    "enum": [
                        "message",
                        "handshake",
                        "delivery"
                    ]
                },
                "next": {
                    "description": "in case forward message",
                    "type": "string"
                },
                "plainBodyBase64": {
                    "description": "the plain text message body, base64 encoded (optional)",
                    "type": "string"
                },
                "pthid": {
                    "description": "parent thread identifier. Uniquely identifies the parent thread that the message belongs to. If not included, the message is the first message in the thread.",
                    "type": "string"
                },
                "thid": {
                    "description": "thread identifier. Uniquely identifies the thread that the message belongs to. If not included, the id property of the message MUST be treated as the value of the thid.",
                    "type": "string"
                },
                "to": {
                    "description": "in format: did:web:mail.io:0xabc -\u003e recipient DIDs",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "toEmails": {
                    "description": "recipient email addresses (email and hash as alternative to To field with DID addresses)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.ToEmail"
                    }
                },
                "type": {
                    "description": "a valid message type URI (MUST be: application/didcomm-encrypted+json or application/didcomm-signed+json or application/mailio-smtp+json)",
                    "type": "string",
                    "enum": [
                        "application/didcomm-encrypted+json",
                        "application/didcomm-signed+json",
                        "application/mailio-smtp+json"
                    ]
                }
            }
        },
        "types.DIDCommRequest": {
            "type": "object",
            "required": [
                "didCommMessage",
                "signatureScheme",
                "timestamp"
            ],
            "properties": {
                "didCommMessage": {
                    "$ref": "#/definitions/types.DIDCommMessage"
                },
                "signatureScheme": {
                    "type": "string",
                    "enum": [
                        "EdDSA_X25519"
                    ]
                },
                "timestamp": {
                    "type": "integer"
                }
            }
        },
        "types.DIDCommSignedRequest": {
            "type": "object",
            "required": [
                "cborPayloadBase64",
                "didCommRequest",
                "senderDomain",
                "signatureBase64"
            ],
            "properties": {
                "cborPayloadBase64": {
                    "description": "the payload that was signed, which is base64 encoded.",
                    "type": "string"
                },
                "didCommRequest": {
                    "$ref": "#/definitions/types.DIDCommRequest"
                },
                "senderDomain": {
                    "description": "origin of the request (where DNS is published with Mailio public key)",
                    "type": "string"
                },
                "signatureBase64": {
                    "description": "the signature of the payload, which is base64 encoded.",
                    "type": "string"
                }
            }
        },
        "types.DIDDocumentSignedRequest": {
            "type": "object",
            "required": [
                "cborPayloadBase64",
                "didLookupRequest",
                "senderDomain",
                "signatureBase64"
            ],
            "properties": {
                "cborPayloadBase64": {
                    "type": "string"
                },
                "didLookupRequest": {
                    "$ref": "#/definitions/types.DIDLookupRequest"
                },
                "senderDomain": {
                    "description": "origin of the request (where DNS is published with Mailio public key)",
                    "type": "string"
                },
                "signatureBase64": {
                    "type": "string"
                }
            }
        },
        "types.DIDDocumentSignedResponse": {
            "type": "object",
            "required": [
                "cborPayloadBase64",
                "didLookupResponse",
                "signatureBase64"
            ],
            "properties": {
                "cborPayloadBase64": {
                    "type": "string"
                },
                "didLookupResponse": {
                    "$ref": "#/definitions/types.DIDLookupResponse"
                },
                "signatureBase64": {
                    "type": "string"
                }
            }
        },
        "types.DIDLookup": {
            "type": "object",
            "required": [
                "email",
                "emailHash"
            ],
            "properties": {
                "didDocument": {
                    "$ref": "#/definitions/did.Document"
                },
                "email": {
                    "description": "email address",
                    "type": "string"
                },
                "emailHash": {
                    "description": "scrypt hash of the email address",
                    "type": "string"
                },
                "mtpStatusCode": {
                    "$ref": "#/definitions/types.MTPStatusCode"
                },
                "supportsMailio": {
                    "description": "if the recipient supports Mailio (derived from domain resolving)",
                    "type": "boolean"
                },
                "supportsStandardEmail": {
                    "description": "if the recipient supports standard email (derrived from domain resolving)",
                    "type": "boolean"
                }
            }
        },
        "types.DIDLookupRequest": {
            "type": "object",
            "required": [
                "didLookups",
                "lookupHeader",
                "senderAddress"
            ],
            "properties": {
                "didLookups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.DIDLookup"
                    }
                },
                "lookupHeader": {
                    "$ref": "#/definitions/types.LookupHeader"
                },
                "senderAddress": {
                    "description": "intended senders Mailio address",
                    "type": "string"
                }
            }
        },
        "types.DIDLookupResponse": {
            "type": "object",
            "required": [
                "lookupHeader"
            ],
            "properties": {
                "foundLookups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.DIDLookup"
                    }
                },
                "lookupHeader": {
                    "$ref": "#/definitions/types.LookupHeader"
                },
                "notFoundLookups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.DIDLookup"
                    }
                }
            }
        },
        "types.Domain": {
            "type": "object",
            "properties": {
                "_deleted": {
                    "type": "boolean"
                },
                "_id": {
                    "type": "string"
                },
                "_rev": {
                    "description": "Rev is the revision number returned\n_Rev    string ` + "`" + `json:\"_rev,omitempty\"` + "`" + `",
                    "type": "string"
                },
                "mailioCheckError": {
                    "type": "string"
                },
                "mailioDIDDomain": {
                    "description": "mailio domain (if supportsMailio)",
                    "type": "string"
                },
                "mailioPublicKey": {
                    "type": "string"
                },
                "mxCheckError": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "ok": {
                    "description": "_ID     string ` + "`" + `json:\"_id,omitempty\"` + "`" + `",
                    "type": "boolean"
                },
                "supportsMailio": {
                    "description": "domain can be both (mailio and smtp)",
                    "type": "boolean"
                },
                "supportsStandardEmail": {
                    "description": "domain can be both (mailio and smtp)",
                    "type": "boolean"
                },
                "timestamp": {
                    "type": "integer"
                }
            }
        },
        "types.EncryptedAttachmentData": {
            "type": "object",
            "required": [
                "links"
            ],
            "properties": {
                "base64": {
                    "description": "the base64 encoded attachment",
                    "type": "string"
                },
                "hash": {
                    "description": "the hash of the attachment",
                    "type": "string"
                },
                "links": {
                    "description": "the links to the attachment",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "types.EncryptedBody": {
            "type": "object",
            "required": [
                "aad",
                "ciphertext",
                "iv",
                "protected",
                "recipients",
                "tag"
            ],
            "properties": {
                "aad": {
                    "description": "additional authenticated data",
                    "type": "string"
                },
                "ciphertext": {
                    "description": "the encrypted message",
                    "type": "string"
                },
                "iv": {
                    "description": "the initialization vector (nonce)",
                    "type": "string"
                },
                "protected": {
                    "description": "the protected header",
                    "type": "string"
                },
                "recipients": {
                    "description": "the recipients of the message (at least one)",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/types.Recipient"
                    }
                },
                "tag": {
                    "description": "integrity check on the encrypted message",
                    "type": "string"
                }
            }
        },
        "types.Epk": {
            "type": "object",
            "required": [
                "crv",
                "kty",
                "x"
            ],
            "properties": {
                "crv": {
                    "description": "The curve parameter used for the key",
                    "type": "string"
                },
                "kty": {
                    "description": "Key Type, indicating the type of key used, such as an elliptic curve key (\"OKP\" for Octet Key Pair).",
                    "type": "string"
                },
                "x": {
                    "description": "The X coordinate for the elliptic curve point",
                    "type": "string"
                }
            }
        },
        "types.Handshake": {
            "type": "object",
            "properties": {
                "cborPayloadBase64": {
                    "description": "payload in cbor format of handshake Content",
                    "type": "string"
                },
                "content": {
                    "$ref": "#/definitions/types.HandshakeContent"
                },
                "signatureBase64": {
                    "type": "string"
                }
            }
        },
        "types.HandshakeContent": {
            "type": "object",
            "properties": {
                "created": {
                    "description": "timestamp of the handshake",
                    "type": "number"
                },
                "handshakeId": {
                    "description": "handshake ID",
                    "type": "string"
                },
                "level": {
                    "description": "handshake level",
                    "type": "string"
                },
                "originServer": {
                    "description": "origin server",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.OriginServer"
                        }
                    ]
                },
                "ownerAddress": {
                    "description": "mailio address of the owner of the handshake",
                    "type": "string"
                },
                "ownerPublicKey": {
                    "description": "owner public key of the owner of the handshake",
                    "type": "string"
                },
                "senderMetadata": {
                    "description": "sender meta data (either Mailio address or sha512 email address )",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.SenderMetadata"
                        }
                    ]
                },
                "signatureBase64": {
                    "description": "owners signature of the handshake",
                    "type": "string"
                },
                "signatureScheme": {
                    "description": "handshake signature scheme",
                    "type": "string"
                },
                "signupRules": {
                    "description": "handshake signup rules",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.HandshakeSignupRules"
                        }
                    ]
                },
                "signupSubType": {
                    "description": "handshake signup sub type",
                    "type": "integer"
                },
                "status": {
                    "description": "handshake status",
                    "type": "string"
                },
                "type": {
                    "description": "handshake type",
                    "type": "string"
                }
            }
        },
        "types.HandshakeLink": {
            "type": "object",
            "properties": {
                "link": {
                    "type": "string"
                }
            }
        },
        "types.HandshakeLookup": {
            "type": "object",
            "required": [
                "email",
                "originServer"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "email": {
                    "description": "email address",
                    "type": "string"
                },
                "emailHash": {
                    "description": "scrypt hash of the email address",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "originServer": {
                    "$ref": "#/definitions/types.OriginServer"
                }
            }
        },
        "types.HandshakeLookupResponse": {
            "type": "object",
            "properties": {
                "found": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.HandshakeContent"
                    }
                },
                "notFound": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.HandshakeLookup"
                    }
                }
            }
        },
        "types.HandshakeRequest": {
            "type": "object",
            "required": [
                "handshakeLookups",
                "lookupHeader",
                "senderAddress"
            ],
            "properties": {
                "handshakeLookups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.HandshakeLookup"
                    }
                },
                "lookupHeader": {
                    "$ref": "#/definitions/types.LookupHeader"
                },
                "returnDefaultServerHandshake": {
                    "description": "default false",
                    "type": "boolean"
                },
                "senderAddress": {
                    "description": "intended senders Mailio address",
                    "type": "string"
                }
            }
        },
        "types.HandshakeResponse": {
            "type": "object",
            "required": [
                "handshakes",
                "lookupHeader"
            ],
            "properties": {
                "handshakes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.HandshakeContent"
                    }
                },
                "lookupHeader": {
                    "$ref": "#/definitions/types.LookupHeader"
                }
            }
        },
        "types.HandshakeSignedRequest": {
            "type": "object",
            "required": [
                "cborPayloadBase64",
                "handshakeRequest",
                "senderDomain",
                "signatureBase64"
            ],
            "properties": {
                "cborPayloadBase64": {
                    "type": "string"
                },
                "handshakeRequest": {
                    "$ref": "#/definitions/types.HandshakeRequest"
                },
                "senderDomain": {
                    "description": "origin of the request (where DNS is published with Mailio public key)",
                    "type": "string"
                },
                "signatureBase64": {
                    "type": "string"
                }
            }
        },
        "types.HandshakeSignedResponse": {
            "type": "object",
            "required": [
                "cborPayloadBase64",
                "handshakeResponse",
                "signatureBase64"
            ],
            "properties": {
                "cborPayloadBase64": {
                    "type": "string"
                },
                "handshakeResponse": {
                    "$ref": "#/definitions/types.HandshakeResponse"
                },
                "signatureBase64": {
                    "type": "string"
                }
            }
        },
        "types.HandshakeSignupRules": {
            "type": "object",
            "properties": {
                "frequencyMinutes": {
                    "description": "optional",
                    "type": "integer"
                }
            }
        },
        "types.Header": {
            "type": "object",
            "required": [
                "epk",
                "kid"
            ],
            "properties": {
                "epk": {
                    "description": "(Ephemeral Public Key): A temporary public key that was used in conjunction with the recipient's public key to encrypt the encrypted_key",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.Epk"
                        }
                    ]
                },
                "kid": {
                    "description": "(Key ID): A hint indicating which key was used to encrypt the",
                    "type": "string"
                }
            }
        },
        "types.InputDIDLookup": {
            "type": "object",
            "properties": {
                "lookups": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/types.DIDLookup"
                    }
                }
            }
        },
        "types.InputHandshakeLookup": {
            "type": "object",
            "properties": {
                "lookups": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/types.HandshakeLookup"
                    }
                }
            }
        },
        "types.InputLogin": {
            "type": "object",
            "required": [
                "ed25519SigningPublicKeyBase64",
                "email",
                "mailioAddress",
                "nonce",
                "signatureBase64"
            ],
            "properties": {
                "ed25519SigningPublicKeyBase64": {
                    "description": "public key of the private key used to sign the nonce",
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "mailioAddress": {
                    "type": "string"
                },
                "nonce": {
                    "type": "string"
                },
                "signatureBase64": {
                    "description": "signature of Nonce string",
                    "type": "string"
                }
            }
        },
        "types.InputRegister": {
            "type": "object",
            "required": [
                "databasePassword",
                "ed25519SigningPublicKeyBase64",
                "email",
                "mailioAddress",
                "nonce",
                "signatureBase64",
                "x25519PublicKeyBase64"
            ],
            "properties": {
                "databasePassword": {
                    "description": "this is a password for couchdbs private user database",
                    "type": "string"
                },
                "ed25519SigningPublicKeyBase64": {
                    "description": "public key of the private key used to sign the nonce",
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "mailioAddress": {
                    "type": "string"
                },
                "nonce": {
                    "type": "string"
                },
                "signatureBase64": {
                    "description": "signature of Nonce string",
                    "type": "string"
                },
                "x25519PublicKeyBase64": {
                    "description": "public encryption key",
                    "type": "string"
                }
            }
        },
        "types.InputWebDIDLookup": {
            "type": "object",
            "required": [
                "dids"
            ],
            "properties": {
                "dids": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "types.JwsToken": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "types.JwsTokenWithSmartKey": {
            "type": "object",
            "required": [
                "didDocument",
                "email",
                "encryptedSmartKeyBase64",
                "jwsToken",
                "smartKeyPasswordPart"
            ],
            "properties": {
                "didDocument": {
                    "$ref": "#/definitions/did.Document"
                },
                "email": {
                    "type": "string"
                },
                "encryptedSmartKeyBase64": {
                    "type": "string"
                },
                "jwsToken": {
                    "type": "string"
                },
                "smartKeyPasswordPart": {
                    "type": "string"
                }
            }
        },
        "types.LookupHeader": {
            "type": "object",
            "required": [
                "signatureScheme",
                "timestamp"
            ],
            "properties": {
                "emailLookupHashScheme": {
                    "type": "string"
                },
                "signatureScheme": {
                    "type": "string",
                    "enum": [
                        "EdDSA_X25519"
                    ]
                },
                "timestamp": {
                    "type": "integer"
                }
            }
        },
        "types.MTPStatusCode": {
            "type": "object",
            "required": [
                "class",
                "detail",
                "subject"
            ],
            "properties": {
                "address": {
                    "description": "Address of the recipient or sender",
                    "type": "string"
                },
                "class": {
                    "description": "Represents the class of the status code (2, 4, 5)",
                    "type": "integer",
                    "enum": [
                        2,
                        4,
                        5
                    ]
                },
                "description": {
                    "description": "Human-readable message or description (optional)",
                    "type": "string"
                },
                "detail": {
                    "description": "Represents the detail of the status code",
                    "type": "integer"
                },
                "subject": {
                    "description": "Represents the subject category of the status code",
                    "type": "integer",
                    "maximum": 8,
                    "minimum": 0
                },
                "timestamp": {
                    "description": "Unix timestamp in milliseconds",
                    "type": "integer"
                }
            }
        },
        "types.MailioAttachment": {
            "type": "object",
            "required": [
                "data",
                "id"
            ],
            "properties": {
                "data": {
                    "description": "the encrypted message body",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.EncryptedAttachmentData"
                        }
                    ]
                },
                "id": {
                    "description": "a globally unique identifier for the attachment",
                    "type": "string"
                }
            }
        },
        "types.MailioSocial": {
            "type": "object",
            "properties": {
                "clubhouse": {
                    "type": "string"
                },
                "discord": {
                    "type": "string"
                },
                "facebook": {
                    "type": "string"
                },
                "github": {
                    "type": "string"
                },
                "instagram": {
                    "type": "string"
                },
                "linkedin": {
                    "type": "string"
                },
                "other": {
                    "type": "string"
                },
                "signal": {
                    "type": "string"
                },
                "skype": {
                    "type": "string"
                },
                "slack": {
                    "type": "string"
                },
                "snapchat": {
                    "type": "string"
                },
                "telegram": {
                    "type": "string"
                },
                "tiktok": {
                    "type": "string"
                },
                "twitter": {
                    "type": "string"
                },
                "whatsapp": {
                    "type": "string"
                },
                "zoom": {
                    "type": "string"
                }
            }
        },
        "types.NonceResponse": {
            "type": "object",
            "properties": {
                "nonce": {
                    "type": "string"
                }
            }
        },
        "types.OriginServer": {
            "type": "object",
            "required": [
                "domain"
            ],
            "properties": {
                "domain": {
                    "description": "required",
                    "type": "string"
                },
                "ip": {
                    "description": "optional",
                    "type": "string"
                }
            }
        },
        "types.OutputBasicUserInfo": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "company": {
                    "description": "company of the requester",
                    "type": "string"
                },
                "created": {
                    "description": "creation time",
                    "type": "integer"
                },
                "description": {
                    "description": "description of the request",
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "jobTitle": {
                    "description": "job title of the requester",
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "picture": {
                    "type": "string"
                },
                "social": {
                    "description": "social media links of the requester",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.MailioSocial"
                        }
                    ]
                },
                "totalDisk": {
                    "type": "integer"
                },
                "usedDisk": {
                    "type": "integer"
                },
                "whatToShare": {
                    "description": "what the user wants to share from their personal data",
                    "type": "string"
                }
            }
        },
        "types.OutputDIDLookup": {
            "type": "object",
            "properties": {
                "found": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.DIDLookup"
                    }
                },
                "notFound": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.DIDLookup"
                    }
                }
            }
        },
        "types.OutputUserAddress": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                }
            }
        },
        "types.PagingResults": {
            "type": "object",
            "properties": {
                "bookmark": {
                    "type": "string"
                },
                "docs": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "types.PresignedUrl": {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string"
                }
            }
        },
        "types.Recipient": {
            "type": "object",
            "required": [
                "encrypted_key",
                "header"
            ],
            "properties": {
                "encrypted_key": {
                    "description": "Tthe key used to encrypt the ciphertext, encrypted with the recipient's public key",
                    "type": "string"
                },
                "header": {
                    "description": "encryption parameters specific to each recipient",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.Header"
                        }
                    ]
                }
            }
        },
        "types.SenderMetadata": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "mailio address",
                    "type": "string"
                },
                "emailHash": {
                    "description": "scrypt hash of the email address",
                    "type": "string"
                }
            }
        },
        "types.SmartKeyPayload": {
            "type": "object",
            "required": [
                "address",
                "challenge",
                "challengeSignature",
                "databasePassword",
                "email",
                "passwordShare",
                "preRotatedMailioKey",
                "primaryEd25519PublicKey",
                "primaryX25519PublicKey",
                "smartKeyEncrypted"
            ],
            "properties": {
                "address": {
                    "description": "mailio address",
                    "type": "string"
                },
                "challenge": {
                    "description": "challenge",
                    "type": "string"
                },
                "challengeSignature": {
                    "description": "signature of the challenge with the primary private key (held by client only)",
                    "type": "string"
                },
                "databasePassword": {
                    "description": "CoachDB password",
                    "type": "string"
                },
                "email": {
                    "description": "email address",
                    "type": "string"
                },
                "passwordShare": {
                    "description": "a single share of a Shamir secret (2 out of 3 required for decryption)",
                    "type": "string"
                },
                "preRotatedMailioKey": {
                    "description": "encypted pre-Shamir secret sharing",
                    "type": "string"
                },
                "primaryEd25519PublicKey": {
                    "description": "primary Ed25519 public key (associated with address)",
                    "type": "string"
                },
                "primaryX25519PublicKey": {
                    "description": "primary X25519 public key (associated with address)",
                    "type": "string"
                },
                "smartKeyEncrypted": {
                    "description": "encrypted pre-Shamir secret sharing",
                    "type": "string"
                }
            }
        },
        "types.ToEmail": {
            "type": "object",
            "required": [
                "email",
                "emailHash"
            ],
            "properties": {
                "email": {
                    "description": "recipient email address",
                    "type": "string"
                },
                "emailHash": {
                    "description": "recipient email address hash",
                    "type": "string"
                }
            }
        },
        "types.UserDomain": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "types.VCValidationResponse": {
            "type": "object",
            "properties": {
                "requestId": {
                    "type": "string"
                },
                "valid": {
                    "type": "boolean"
                }
            }
        },
        "types.WebauthRegistrationVerify": {
            "type": "object",
            "required": [
                "attestationResponse",
                "smartKeyPayload"
            ],
            "properties": {
                "attestationResponse": {
                    "$ref": "#/definitions/types.WebauthnAttestationResponseJSON"
                },
                "smartKeyPayload": {
                    "$ref": "#/definitions/types.SmartKeyPayload"
                }
            }
        },
        "types.WebauthnAttestationResponse": {
            "type": "object",
            "properties": {
                "attestationObject": {
                    "type": "string"
                },
                "authenticatorData": {
                    "type": "string"
                },
                "clientDataJSON": {
                    "type": "string"
                },
                "publicKey": {
                    "type": "string"
                },
                "publicKeyAlgorithm": {
                    "type": "integer"
                },
                "transports": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "types.WebauthnAttestationResponseJSON": {
            "type": "object",
            "properties": {
                "authenticatorAttachment": {
                    "type": "string"
                },
                "clientExtensionResults": {
                    "type": "object",
                    "additionalProperties": true
                },
                "id": {
                    "type": "string"
                },
                "rawId": {
                    "type": "string"
                },
                "response": {
                    "$ref": "#/definitions/types.WebauthnAttestationResponse"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "webauthncose.COSEAlgorithmIdentifier": {
            "type": "integer",
            "enum": [
                -7,
                -35,
                -36,
                -65535,
                -257,
                -258,
                -259,
                -37,
                -38,
                -39,
                -8,
                -47
            ],
            "x-enum-varnames": [
                "AlgES256",
                "AlgES384",
                "AlgES512",
                "AlgRS1",
                "AlgRS256",
                "AlgRS384",
                "AlgRS512",
                "AlgPS256",
                "AlgPS384",
                "AlgPS512",
                "AlgEdDSA",
                "AlgES256K"
            ]
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Mailio Server API",
	Description:      "Implements the Mailio server based on https://mirs.mail.io/ specifications",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
